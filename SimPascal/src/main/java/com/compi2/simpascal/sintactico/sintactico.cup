package com.compi2.simpascal.sintactico;

import com.compi2.simpascal.instrucciones.*;
import com.compi2.simpascal.instrucciones.operadores.*;
import com.compi2.simpascal.instrucciones.simbolos.Simbolo;
import com.compi2.simpascal.instrucciones.tipos.*;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.*;

// parser
parser code {:
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    public String programName = "";

    public class symnames {
        public static final String[] tokens = {
            "ARRAY", "BEGIN", "BOOLEAN", "CHAR", "CONST", "DOWNTO", "DO", "ELSE", "END",
            "FILE", "FOR", "FUNCTION", "GOTO", "IF", "IN", "INTEGER", "LABEL", "NIL", 
            "OF", "ON", "PACKED", "PROCEDURE", "PROGRAM", "READLN", "REAL", "RECORD", 
            "REPEAT", "SET", "STRING", "THEN", "TO", "TYPE", "UNTIL", "VAR", "WHILE", 
            "WITH", "WRITELN", "MAS", "MENOS", "MULTI", "DIV", "MOD", "UMENOS", 
            "ASIGNACION", "IGUALA", "DIFERENTEA", "MAYOR", "MENOR", "MAYORIGUAL", 
            "MENORIGUAL", "COMA", "PUNTOCOMA", "PUNTO", "DOSPUNTOS", "L_LLAVE", 
            "R_LLAVE", "L_PAREN", "R_PAREN", "L_CORCH", "R_CORCH", "FLECHA", "BARRA", 
            "CADENA", "ENTERO", "DECIMAL", "ID", "CARACTER", "OR", "AND", "NOT"
        };
    }

    public void syntax_error(Symbol s){
        if(s.value != null) {
            listaErrores.add(new Errores("Sintactico Recuperable", "Componente inesperado: " + s.value.toString(), 
                s.left, s.right));
        }
    }

    public void unrecovered_syntax_error(Symbol s) { 
        if(s.value != null) {
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", s.value.toString(), 
            s.left-1, s.right));
        }else {
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "", 
            s.left-1, s.right));
        }
    }
:}

action code
{:
:}

// ---Terminales - Palabras clave
terminal ARRAY, BEGIN, BOOLEAN, CHAR, CONST, DOWNTO, DO, ELSEIF, ELSE, END,
         FILE, FOR, FUNCTION, GOTO, IF, IN, INTEGER, LABEL,
         NIL, OF, ON, PACKED, PROCEDURE, PROGRAM, READLN, REAL,
         RECORD, REPEAT, SET, STRING, THEN, TO, TYPE, UNTIL, VAR, WHILE, WITH, WRITELN;

// ---Terminales - Operadores
terminal MAS, MENOS, MULTI, DIV, MOD, UMENOS, ASIGNACION;
terminal IGUALA, DIFERENTEA, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;

// ---Terminales - Caracteres y Separadores
terminal COMA, PUNTOCOMA, PUNTO, DOSPUNTOS, L_LLAVE, R_LLAVE, L_PAREN, R_PAREN, L_CORCH, R_CORCH, FLECHA, BARRA;

// ---Terminales - Tipos de datos
terminal String CADENA, ENTERO, DECIMAL, ID;
terminal char CARACTER;

// ---Terminales - Operadores l√≥gicos
terminal OR, AND, NOT;


// ---No Terminales

nonterminal LinkedList<Instruccion>     inicio, i_instrucciones, instrucciones;
nonterminal Instruccion                 instruccion, instruccionU;

nonterminal Tipo                        tipos;
nonterminal Instruccion                 expresion, e_arit, e_logic, e_relac, e_nativ, casteo;
nonterminal LinkedList<Instruccion>     i_declaracion, i_funciones, i_procedimientos, i_fun_proc, ins_statements, i_elseIfsB, i_elseIfs;
nonterminal Instruccion                 i_write, i_read, i_asignar, funcion, procedimiento, i_if, i_elseIf, i_else, i_for, i_while;
nonterminal Instruccion                 dec_type, dec_const, dec_var, llam_fun, llam_proc, i_elseB, dec_type_opt, dec_const_opt, dec_var_opt;
nonterminal Simbolo                     constante;
nonterminal LinkedList<Simbolo>         constantes_list, variables_list, var_aux, types_list, types_aux;
nonterminal LinkedList<HashMap>         parametros;
nonterminal LinkedList<String>          variable;
nonterminal int[]                       rango;
nonterminal LinkedList<Instruccion>     write_aux, llam_par;



precedence left     OR;
precedence left     AND;
precedence right    NOT;
precedence left     IGUALA, DIFERENTEA, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;
precedence left     MAS, MENOS;
precedence left     MULTI, DIV, MOD;
precedence left     IF, ELSEIF, ELSE;
precedence right    UMENOS;

start with inicio;

inicio  ::= PROGRAM ID:c PUNTOCOMA 
            i_declaracion:a  
            i_fun_proc:fp 
            i_instrucciones:b PUNTO        {:  
                                                RESULT = new LinkedList<>();
                                                programName = c;
                                                RESULT.addAll(a);
                                                RESULT.addAll(fp);
                                                RESULT.addAll(b);
                                            :}
;
i_declaracion ::= dec_type_opt:a dec_const_opt:b dec_var_opt:c {: 
                        RESULT = new LinkedList<>(); 
                        if (a != null) RESULT.add(a);
                        if (b != null) RESULT.add(b);
                        if (c != null) RESULT.add(c);
                    :}
;

dec_type_opt ::= dec_type:a  {: RESULT = a; :}
              |            {: RESULT = null; :}
;

dec_const_opt ::= dec_const:a {: RESULT =a; :}
               |            {: RESULT = null; :}
;

dec_var_opt ::= dec_var:a {: RESULT = a; :}
             |          {: RESULT = null; :}
;

dec_type ::= TYPE types_list:a                  {: RESULT = new DecTypes(a, aleft, aright); :}
;
types_list ::=  types_list:a types_aux:b              {:  RESULT = a; RESULT.addAll(b);   :}
            |   types_aux:a                           {:  RESULT = new LinkedList<>(); RESULT.addAll(a);   :}
;
types_aux ::= variable:a IGUALA tipos:b PUNTOCOMA          {:  
                                                                RESULT = new LinkedList<>();
                                                                for(String id : a) {
                                                                    Simbolo s = new Simbolo(b, id, null, true);
                                                                    RESULT.add(s);
                                                                }
                                                            :}
        |   variable:a IGUALA ARRAY L_LLAVE rango:c R_LLAVE OF tipos:b PUNTOCOMA     {:  RESULT = new LinkedList<>();
                                                                                            for(String id : a) {
                                                                                                Simbolo s = new Simbolo(b, id, c, true);
                                                                                                RESULT.add(s);
                                                                                            }
                                                                                        :}
;

dec_const ::= CONST constantes_list:a          {:
                                                        RESULT = new DecConst(a, aleft, aright);
                                                    :}
;
constantes_list ::= constantes_list:a  constante:b          {: 
                                                                RESULT = a; 
                                                                RESULT.add(b); 
                                                            :}
                  | constante:a                             {: 
                                                                RESULT = new LinkedList<>(); 
                                                                RESULT.add(a);
                                                            
                                                            :}
;
constante ::= ID:a IGUALA expresion:b PUNTOCOMA             {: RESULT = new Simbolo(b.tipo, a, b, false); :}
;


dec_var   ::= VAR variables_list:a                     {:  RESULT = new DecVar(a, aleft, aright); :}
;
variables_list ::=  variables_list:a var_aux:b              {:  RESULT = a; RESULT.addAll(b);   :}
                |   var_aux:a                               {:  RESULT = new LinkedList<>(); RESULT.addAll(a);   :}
;
var_aux ::= variable:a DOSPUNTOS tipos:b PUNTOCOMA          {:  
                                                                RESULT = new LinkedList<>();
                                                                for(String id : a) {
                                                                    Simbolo s = new Simbolo(b, id, null, true);
                                                                    RESULT.add(s);
                                                                }
                                                            :}
        |   variable:a DOSPUNTOS ARRAY L_LLAVE rango:c R_LLAVE OF tipos:b PUNTOCOMA     {:  RESULT = new LinkedList<>();
                                                                                            for(String id : a) {
                                                                                                Simbolo s = new Simbolo(b, id, c, true);
                                                                                                RESULT.add(s);
                                                                                            }
                                                                                        :}
;
rango ::=   ENTERO:a PUNTO PUNTO ENTERO:b       {:  RESULT = new int[]{Integer.parseInt(a), Integer.parseInt(b)}; :}
;

variable ::=    variable:a COMA ID:b            {:  
                                                    RESULT = a;  
                                                    RESULT.add(b);  
                                                :}
            |   ID:a                            {:  
                                                    RESULT = new LinkedList<>();
                                                    RESULT.add(a);
                                                :}
;

i_fun_proc ::= i_funciones:a i_procedimientos:b {: 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.addAll(a); 
                                                    RESULT.addAll(b); 
                                                :}
               | i_funciones:a                    {: 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.addAll(a); 
                                                :}
               | i_procedimientos:b             {: 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.addAll(b); 
                                                :}
               | /* vac√≠o */                    {: 
                                                    RESULT = new LinkedList<>(); 
                                                :}
;

i_instrucciones ::= BEGIN instrucciones:a END   {: RESULT = a; :}
                |   error:e                     {: 
                                                    listaErrores.add(new Errores("Sintactico Recuperable", 
                                                        "Error en i_instrucciones", 
                                                        eleft, eright));
                                                    RESULT = new LinkedList<>(); 
                                                :}
;

instrucciones ::= instrucciones:a instruccion:b    {:  
                                                                RESULT = a; 
                                                                if(b != null) {
                                                                    RESULT.add(b);
                                                                }
                                                            :}
                | instruccion:a                    {:  
                                                                RESULT = new LinkedList<>(); 
                                                                if(a != null) {
                                                                    RESULT.add(a);
                                                                }
                                                            :}
;

instruccion ::= i_write:a PUNTOCOMA         {:  RESULT = a; :}
            |   i_read:a PUNTOCOMA          {:  RESULT = a; :}
            |   i_asignar:a PUNTOCOMA       {:  RESULT = a; :}
            |   i_if:a PUNTOCOMA            {:  RESULT = a; :}
            |   i_for:a PUNTOCOMA           {:  RESULT = a; :}
            |   i_while:a PUNTOCOMA         {:  RESULT = a; :}
            |   llam_proc:a PUNTOCOMA       {:  RESULT = a; :}
            |   error:e PUNTOCOMA           {: 
                                                listaErrores.add(new Errores("Sintactico Recuperable", 
                                                "Instrucci√≥n inv√°lida, falta ';' o error antes de ';'.", 
                                                eleft, eright));
                                                RESULT = null;
                                            :}
            |   error:e                     {: 
                                                listaErrores.add(new Errores("Sintactico Recuperable", 
                                                    "Falta ';' despu√©s de la instrucci√≥n.", 
                                                    eleft, eright + 1));
                                                RESULT = null;
                                            :}
;

tipos   ::= INTEGER     {:  RESULT = new Tipo(Dato.ENTERO);     :}
        |   REAL        {:  RESULT = new Tipo(Dato.DECIMAL);    :}
        |   CHAR        {:  RESULT = new Tipo(Dato.CARACTER);   :}
        |   STRING      {:  RESULT = new Tipo(Dato.CADENA);     :}
        |   BOOLEAN     {:  RESULT = new Tipo(Dato.BOOLEANO);   :}
        |   ID:a        {:  RESULT = new Type(a, null);         :}
;

i_write   ::= WRITELN L_PAREN write_aux:a R_PAREN       {:  RESULT = new WriteLn(a, aleft, aright); :}
;

i_read   ::= READLN L_PAREN variable:a R_PAREN       {:  RESULT = new ReadLn(a, aleft, aright); :}
;

write_aux   ::= write_aux:a COMA expresion:b        {:  
                                                        RESULT = a; 
                                                        RESULT.add(b);
                                                    :}
            |   expresion:a                         {:  
                                                        RESULT = new LinkedList<>(); 
                                                        RESULT.add(a);
                                                    :}        
            | error:e                               {: 
                                                        listaErrores.add(new Errores("Sintactico Recuperable", 
                                                            "Expresion inv√°lida o falta ','.", 
                                                            eleft, eright));
                                                        RESULT = null;
                                                    :}
;

i_asignar ::=   ID:a ASIGNACION expresion:b               {:  RESULT = new AsignacionVar(a, b, aleft, aright);    :}
;

i_if ::=    IF:iff L_PAREN expresion:a R_PAREN THEN ins_statements:st
            i_elseIfsB:efs              
            i_elseB:e                                                {: RESULT = new If(a, st, efs, e, iffleft, iffright); :}
;

i_elseIfsB ::=   i_elseIfs:a            {: RESULT = a; :}
              |                         {: RESULT = null; :}
;

i_elseIfs ::=   i_elseIfs:a i_elseIf:b                  {: RESULT = a; RESULT.add(b); :}
            |   i_elseIf:a                              {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

i_elseIf ::=    ELSEIF L_PAREN expresion:a R_PAREN THEN ins_statements:st   {: RESULT = new ElseIf(a, st, aleft, aright); :}
;

i_elseB ::= i_else:a    {: RESULT = a; :}
        |               {: RESULT = null; :}
;


i_else ::=  ELSE ins_statements:st   {: RESULT = new Else(st, stleft, stright); :}
;

ins_statements ::=  instruccionU:i                                       {: RESULT = new LinkedList<>(); RESULT.add(i); :}
                |   BEGIN instrucciones:a instruccion:b END   {: RESULT = a; RESULT.add(b); :}
;

instruccionU ::=   i_write:a           {:  RESULT = a; :}
                |   i_read:a            {:  RESULT = a; :}
                |   i_asignar:a         {:  RESULT = a; :}
                |   i_if:a              {:  RESULT = a; :}
                |   i_for:a             {:  RESULT = a; :}
                |   i_while:a           {:  RESULT = a; :}
                |   llam_proc:a         {:  RESULT = a; :}
                |   error:e             {: 
                                            listaErrores.add(new Errores("Sintactico Recuperable", 
                                                "Instrucci√≥n no v√°lida.", 
                                                eleft, eright));
                                            RESULT = null;
                                        :}
;

i_for ::= FOR:f ID:id ASIGNACION expresion:asig TO expresion:b DO ins_statements:ins     {:   RESULT = new For(id, asig, b, ins, fleft, fright); :}
;

i_while ::= WHILE:w L_PAREN expresion:exp R_PAREN DO ins_statements:ins         {:  RESULT = new While(exp, ins, wleft, wright); :}
;



i_funciones ::= i_funciones:a funcion:b         {:
                                                    RESULT = a;
                                                    RESULT.add(b);
                                                :}
            |   funcion:a                       {:
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.add(a); 
                                                :}
;
funcion ::= FUNCTION:f ID:id L_PAREN parametros:p R_PAREN DOSPUNTOS tipos:t PUNTOCOMA  
            i_declaracion:dec   
            i_instrucciones:i PUNTOCOMA {:  RESULT = new Funcion(id, t, p, dec, i, fleft, fright);    :}
;

llam_fun ::= ID:id L_PAREN llam_par:lp R_PAREN              {:  RESULT = new LlamadaFunc(id, lp, idleft, idright);  :}
;

llam_proc ::= ID:id L_PAREN llam_par:lp R_PAREN             {:  RESULT = new LlamadaProc(id, lp, idleft, idright);  :}
;

llam_par ::= llam_par:a COMA expresion:b    {:  RESULT = a; RESULT.add(b);  :}
             | expresion:a                  {:  RESULT = new LinkedList<Instruccion>(); RESULT.add(a); :}
;

i_procedimientos ::= i_procedimientos:a procedimiento:b             {:  
                                                                        RESULT = a ;
                                                                        RESULT.add(b); 
                                                                    :}
                |   procedimiento:a                                 {:  
                                                                        RESULT = new LinkedList<>(); 
                                                                        RESULT.add(a);  
                                                                    :}
;
procedimiento ::= PROCEDURE:p ID:id L_PAREN parametros:pr R_PAREN PUNTOCOMA
                  i_declaracion:dec   
                  i_instrucciones:i  PUNTOCOMA                               {:  RESULT = new Procedimiento(id, pr, dec, i, new Tipo(Dato.VOID), pleft, pright); :}

;
parametros ::=  parametros:a COMA variable:ids DOSPUNTOS tipos:t     {:  
                                                                        RESULT = a;
                                                                        for(var id : ids) {
                                                                            var mapa = new HashMap<String, Object>();
                                                                            mapa.put("id", id);
                                                                            mapa.put("tipo", t);
                                                                            RESULT.add(mapa);
                                                                        }
                                                                    :}
            |   variable:ids DOSPUNTOS tipos:t                             {:  
                                                                        RESULT = new LinkedList<HashMap>();
                                                                        for(var id : ids) { 
                                                                            var mapa = new HashMap<String, Object>();
                                                                            mapa.put("id", id);
                                                                            mapa.put("tipo", t);
                                                                            RESULT.add(mapa);
                                                                        }
                                                                    :}
;


expresion ::=   e_arit:a                            {:  RESULT = a; :}
            |   e_relac:a                           {:  RESULT = a; :}
            |   e_logic:a                           {:  RESULT = a; :}
            |   e_nativ:a                           {:  RESULT = a; :}
            |   casteo:a                            {:  RESULT = a; :}
            |   ID:a                                {:  RESULT = new Acceso (a, aleft, aright); :}
            |   ID:a L_LLAVE expresion:b R_LLAVE    {:  System.out.println("Variable array");   :}
            |   L_PAREN expresion:a R_PAREN         {:  RESULT = a; :}
            |   llam_fun:a                          {:  RESULT = a; :}
;

e_arit ::=  MENOS expresion:a                                   {:  RESULT = new Aritmetico(a, OpAritmeticos.NEGACION, aleft, aright);          :} %prec UMENOS
        |   expresion:a MULTI expresion:b                       {:  RESULT = new Aritmetico(a, b, OpAritmeticos.MULTIPLICACION, aleft, aright); :}
        |   DIV L_PAREN expresion:a COMA expresion:b R_PAREN    {:  RESULT = new Aritmetico (a, b, OpAritmeticos.DIVISION, aleft, aright);      :}
        |   MOD L_PAREN expresion:a COMA expresion:b R_PAREN    {:  RESULT = new Aritmetico (a, b, OpAritmeticos.MODULO, aleft, aright);        :}
        |   expresion:a MAS expresion:b                         {:  RESULT = new Aritmetico(a, b, OpAritmeticos.SUMA, aleft, aright);           :}
        |   expresion:a MENOS expresion:b                       {:  RESULT = new Aritmetico(a, b, OpAritmeticos.RESTA, aleft, aright);          :}
;

e_relac ::= expresion:a IGUALA expresion:b      {:  RESULT = new Relacional(a, b, OpRelacionales.IGUALA, aleft, aright); :}
         |  expresion:a DIFERENTEA expresion:b  {:  RESULT = new Relacional(a, b, OpRelacionales.DIFERENTEA, aleft, aright); :}
         |  expresion:a MAYOR expresion:b       {:  RESULT = new Relacional(a, b, OpRelacionales.MAYOR, aleft, aright); :}
         |  expresion:a MENOR expresion:b       {:  RESULT = new Relacional(a, b, OpRelacionales.MENOR, aleft, aright); :}
         |  expresion:a MAYORIGUAL expresion:b  {:  RESULT = new Relacional(a, b, OpRelacionales.MAYORIGUAL, aleft, aright); :}
         |  expresion:a MENORIGUAL expresion:b  {:  RESULT = new Relacional(a, b, OpRelacionales.MENORIGUAL, aleft, aright); :}
;

e_logic ::= NOT expresion:a                     {:  RESULT = new Logico(a, OpLogicos.NOT, aleft, aright); :}
         |  expresion:a OR expresion:b          {:  RESULT = new Logico(a, b, OpLogicos.OR, aleft, aright); :}
         |  expresion:a AND expresion:b         {:  RESULT = new Logico(a, b, OpLogicos.AND, aleft, aright); :}
;

e_nativ ::= ENTERO:a        {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(Dato.ENTERO), aleft, aright);        :}
         |  DECIMAL:a       {:   RESULT = new Nativo(Double.parseDouble(a), new Tipo(Dato.DECIMAL), aleft, aright);     :}
         |  CADENA:a        {:   RESULT = new Nativo(a, new Tipo(Dato.CADENA), aleft, aright);                          :}
         |  CARACTER:a      {:   RESULT = new Nativo(a, new Tipo(Dato.CARACTER), aleft, aright);                        :}
;