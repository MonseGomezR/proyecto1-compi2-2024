
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi2.simpascal.sintactico;

import com.compi2.simpascal.instrucciones.*;
import com.compi2.simpascal.instrucciones.operadores.*;
import com.compi2.simpascal.instrucciones.simbolos.Simbolo;
import com.compi2.simpascal.instrucciones.tipos.*;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\011\000\002\021" +
    "\004\000\002\021\003\000\002\021\003\000\002\021\002" +
    "\000\002\003\005\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\024\006\000\002\047\005\000\002\047\003\000\002" +
    "\047\003\000\002\025\005\000\002\030\010\000\002\030" +
    "\011\000\002\030\011\000\002\030\012\000\002\030\004" +
    "\000\002\023\004\000\002\023\003\000\002\031\010\000" +
    "\002\032\004\000\002\022\003\000\002\022\006\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\033" +
    "\012\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\002\000\002\034\004\000\002\041\004\000" +
    "\002\041\003\000\002\040\006\000\002\035\004\000\002" +
    "\045\004\000\002\045\003\000\002\046\006\000\002\046" +
    "\013\000\002\044\006\000\002\043\005\000\002\043\003" +
    "\000\002\017\004\000\002\017\003\000\002\026\015\000" +
    "\002\036\006\000\002\037\006\000\002\050\005\000\002" +
    "\050\003\000\002\020\004\000\002\020\003\000\002\027" +
    "\013\000\002\042\007\000\002\042\005\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\006\000\002" +
    "\010\005\000\002\010\003\000\002\011\004\000\002\011" +
    "\005\000\002\011\010\000\002\011\010\000\002\011\005" +
    "\000\002\011\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\012\004\000\002\012\005\000\002\012" +
    "\005\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\033\005\001\002\000\004\002\326\001" +
    "\002\000\004\106\006\001\002\000\004\070\007\001\002" +
    "\000\016\003\uffd4\005\uffd4\010\012\020\uffd4\032\uffd4\046" +
    "\011\001\002\000\012\003\uffd5\005\uffd5\020\uffd5\032\uffd5" +
    "\001\002\000\004\106\027\001\002\000\004\106\275\001" +
    "\002\000\012\003\ufffc\005\ufffc\020\024\032\017\001\002" +
    "\000\014\003\uffd6\005\uffd6\020\uffd6\032\uffd6\046\011\001" +
    "\002\000\012\003\uffd7\005\uffd7\020\uffd7\032\uffd7\001\002" +
    "\000\010\003\ufffd\005\ufffd\032\017\001\002\000\004\106" +
    "\265\001\002\000\010\003\uffbf\005\uffbf\032\uffbf\001\002" +
    "\000\006\003\045\005\046\001\002\000\012\003\uffc6\005" +
    "\uffc6\020\uffc6\032\uffc6\001\002\000\012\003\ufffe\005\ufffe" +
    "\020\024\032\017\001\002\000\004\106\025\001\002\000" +
    "\004\075\026\001\002\000\004\106\027\001\002\000\006" +
    "\067\uffc8\072\uffc8\001\002\000\006\067\252\072\256\001" +
    "\002\000\006\067\032\076\033\001\002\000\004\106\027" +
    "\001\002\000\004\072\034\001\002\000\014\006\041\007" +
    "\042\024\035\035\037\041\036\001\002\000\010\067\ufff0" +
    "\070\ufff0\076\ufff0\001\002\000\010\067\uffed\070\uffed\076" +
    "\uffed\001\002\000\010\067\uffef\070\uffef\076\uffef\001\002" +
    "\000\004\070\043\001\002\000\010\067\uffec\070\uffec\076" +
    "\uffec\001\002\000\010\067\uffee\070\uffee\076\uffee\001\002" +
    "\000\012\003\uffd4\005\uffd4\010\012\046\011\001\002\000" +
    "\006\003\045\005\046\001\002\000\006\070\ufffa\071\ufffa" +
    "\001\002\000\014\003\062\017\052\022\060\051\054\106" +
    "\061\001\002\000\004\070\050\001\002\000\012\003\uffc5" +
    "\005\uffc5\020\uffc5\032\uffc5\001\002\000\004\070\250\001" +
    "\002\000\004\106\241\001\002\000\004\070\240\001\002" +
    "\000\004\075\231\001\002\000\016\003\062\015\230\017" +
    "\052\022\060\051\054\106\061\001\002\000\016\003\ufff8" +
    "\015\ufff8\017\ufff8\022\ufff8\051\ufff8\106\ufff8\001\002\000" +
    "\004\070\226\001\002\000\004\075\173\001\002\000\006" +
    "\060\071\075\072\001\002\000\022\003\ufff1\015\ufff1\017" +
    "\ufff1\022\ufff1\051\ufff1\070\070\076\067\106\ufff1\001\002" +
    "\000\004\070\066\001\002\000\004\070\065\001\002\000" +
    "\016\003\ufff3\015\ufff3\017\ufff3\022\ufff3\051\ufff3\106\ufff3" +
    "\001\002\000\016\003\ufff4\015\ufff4\017\ufff4\022\ufff4\051" +
    "\ufff4\106\ufff4\001\002\000\004\070\uffe2\001\002\000\016" +
    "\003\ufff2\015\ufff2\017\ufff2\022\ufff2\051\ufff2\106\ufff2\001" +
    "\002\000\026\053\074\055\107\056\073\075\105\103\077" +
    "\104\114\105\100\106\104\107\106\112\102\001\002\000" +
    "\026\053\074\055\107\056\073\075\105\103\077\104\114" +
    "\105\100\106\104\107\106\112\102\001\002\000\004\075" +
    "\165\001\002\000\026\053\074\055\107\056\073\075\105" +
    "\103\077\104\114\105\100\106\104\107\106\112\102\001" +
    "\002\000\050\012\uffba\013\uffba\014\uffba\043\uffba\052\uffba" +
    "\053\uffba\054\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\066\uffba\067\uffba\070\uffba\074\uffba\076\uffba\110\uffba" +
    "\111\uffba\001\002\000\050\012\uffb3\013\uffb3\014\uffb3\043" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\074\uffb3\076" +
    "\uffb3\110\uffb3\111\uffb3\001\002\000\050\012\uffa1\013\uffa1" +
    "\014\uffa1\043\uffa1\052\uffa1\053\uffa1\054\uffa1\061\uffa1\062" +
    "\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1" +
    "\074\uffa1\076\uffa1\110\uffa1\111\uffa1\001\002\000\050\012" +
    "\uffa2\013\uffa2\014\uffa2\043\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\074\uffa2\076\uffa2\110\uffa2\111\uffa2\001\002" +
    "\000\034\052\127\053\122\054\124\061\132\062\126\063" +
    "\130\064\123\065\125\066\121\067\uffc1\076\uffc1\110\131" +
    "\111\120\001\002\000\026\053\074\055\107\056\073\075" +
    "\105\103\077\104\114\105\100\106\104\107\106\112\102" +
    "\001\002\000\050\012\uffb7\013\uffb7\014\uffb7\043\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7" +
    "\065\uffb7\066\uffb7\067\uffb7\070\uffb7\074\uffb7\076\uffb7\110" +
    "\uffb7\111\uffb7\001\002\000\054\012\uffb6\013\uffb6\014\uffb6" +
    "\043\uffb6\052\uffb6\053\uffb6\054\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\073\155" +
    "\074\uffb6\075\156\076\uffb6\110\uffb6\111\uffb6\001\002\000" +
    "\026\053\074\055\107\056\073\075\105\103\077\104\114" +
    "\105\100\106\104\107\106\112\102\001\002\000\050\012" +
    "\uffa0\013\uffa0\014\uffa0\043\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067" +
    "\uffa0\070\uffa0\074\uffa0\076\uffa0\110\uffa0\111\uffa0\001\002" +
    "\000\004\075\146\001\002\000\050\012\uffbb\013\uffbb\014" +
    "\uffbb\043\uffbb\052\uffbb\053\uffbb\054\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\074" +
    "\uffbb\076\uffbb\110\uffbb\111\uffbb\001\002\000\050\012\uffb8" +
    "\013\uffb8\014\uffb8\043\uffb8\052\uffb8\053\uffb8\054\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8" +
    "\070\uffb8\074\uffb8\076\uffb8\110\uffb8\111\uffb8\001\002\000" +
    "\006\067\115\076\116\001\002\000\050\012\uffb9\013\uffb9" +
    "\014\uffb9\043\uffb9\052\uffb9\053\uffb9\054\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\074\uffb9\076\uffb9\110\uffb9\111\uffb9\001\002\000\050\012" +
    "\uffa3\013\uffa3\014\uffa3\043\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\070\uffa3\074\uffa3\076\uffa3\110\uffa3\111\uffa3\001\002" +
    "\000\026\053\074\055\107\056\073\075\105\103\077\104" +
    "\114\105\100\106\104\107\106\112\102\001\002\000\004" +
    "\070\uffc3\001\002\000\034\052\127\053\122\054\124\061" +
    "\132\062\126\063\130\064\123\065\125\066\121\067\uffc2" +
    "\076\uffc2\110\131\111\120\001\002\000\026\053\074\055" +
    "\107\056\073\075\105\103\077\104\114\105\100\106\104" +
    "\107\106\112\102\001\002\000\026\053\074\055\107\056" +
    "\073\075\105\103\077\104\114\105\100\106\104\107\106" +
    "\112\102\001\002\000\026\053\074\055\107\056\073\075" +
    "\105\103\077\104\114\105\100\106\104\107\106\112\102" +
    "\001\002\000\026\053\074\055\107\056\073\075\105\103" +
    "\077\104\114\105\100\106\104\107\106\112\102\001\002" +
    "\000\026\053\074\055\107\056\073\075\105\103\077\104" +
    "\114\105\100\106\104\107\106\112\102\001\002\000\026" +
    "\053\074\055\107\056\073\075\105\103\077\104\114\105" +
    "\100\106\104\107\106\112\102\001\002\000\026\053\074" +
    "\055\107\056\073\075\105\103\077\104\114\105\100\106" +
    "\104\107\106\112\102\001\002\000\026\053\074\055\107" +
    "\056\073\075\105\103\077\104\114\105\100\106\104\107" +
    "\106\112\102\001\002\000\026\053\074\055\107\056\073" +
    "\075\105\103\077\104\114\105\100\106\104\107\106\112" +
    "\102\001\002\000\026\053\074\055\107\056\073\075\105" +
    "\103\077\104\114\105\100\106\104\107\106\112\102\001" +
    "\002\000\026\053\074\055\107\056\073\075\105\103\077" +
    "\104\114\105\100\106\104\107\106\112\102\001\002\000" +
    "\050\012\uffac\013\uffac\014\uffac\043\uffac\052\127\053\122" +
    "\054\124\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\074\uffac\076\uffac\110\uffac\111\uffac" +
    "\001\002\000\050\012\uffa5\013\uffa5\014\uffa5\043\uffa5\052" +
    "\127\053\122\054\124\061\132\062\126\063\130\064\123" +
    "\065\125\066\121\067\uffa5\070\uffa5\074\uffa5\076\uffa5\110" +
    "\uffa5\111\120\001\002\000\050\012\uffaa\013\uffaa\014\uffaa" +
    "\043\uffaa\052\127\053\122\054\124\061\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\074\uffaa" +
    "\076\uffaa\110\uffaa\111\uffaa\001\002\000\050\012\uffae\013" +
    "\uffae\014\uffae\043\uffae\052\uffae\053\uffae\054\124\061\uffae" +
    "\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070" +
    "\uffae\074\uffae\076\uffae\110\uffae\111\uffae\001\002\000\050" +
    "\012\uffab\013\uffab\014\uffab\043\uffab\052\127\053\122\054" +
    "\124\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\067\uffab\070\uffab\074\uffab\076\uffab\110\uffab\111\uffab\001" +
    "\002\000\050\012\uffa8\013\uffa8\014\uffa8\043\uffa8\052\127" +
    "\053\122\054\124\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065" +
    "\uffa8\066\uffa8\067\uffa8\070\uffa8\074\uffa8\076\uffa8\110\uffa8" +
    "\111\uffa8\001\002\000\050\012\uffb1\013\uffb1\014\uffb1\043" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\061\uffb1\062\uffb1\063\uffb1" +
    "\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\074\uffb1\076" +
    "\uffb1\110\uffb1\111\uffb1\001\002\000\050\012\uffa9\013\uffa9" +
    "\014\uffa9\043\uffa9\052\127\053\122\054\124\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\074\uffa9\076\uffa9\110\uffa9\111\uffa9\001\002\000\050\012" +
    "\uffad\013\uffad\014\uffad\043\uffad\052\uffad\053\uffad\054\124" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067" +
    "\uffad\070\uffad\074\uffad\076\uffad\110\uffad\111\uffad\001\002" +
    "\000\050\012\uffa7\013\uffa7\014\uffa7\043\uffa7\052\127\053" +
    "\122\054\124\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\067\uffa7\070\uffa7\074\uffa7\076\uffa7\110\uffa7\111" +
    "\uffa7\001\002\000\050\012\uffa4\013\uffa4\014\uffa4\043\uffa4" +
    "\052\127\053\122\054\124\061\132\062\126\063\130\064" +
    "\123\065\125\066\121\067\uffa4\070\uffa4\074\uffa4\076\uffa4" +
    "\110\uffa4\111\uffa4\001\002\000\026\053\074\055\107\056" +
    "\073\075\105\103\077\104\114\105\100\106\104\107\106" +
    "\112\102\001\002\000\032\052\127\053\122\054\124\061" +
    "\132\062\126\063\130\064\123\065\125\066\121\067\150" +
    "\110\131\111\120\001\002\000\026\053\074\055\107\056" +
    "\073\075\105\103\077\104\114\105\100\106\104\107\106" +
    "\112\102\001\002\000\032\052\127\053\122\054\124\061" +
    "\132\062\126\063\130\064\123\065\125\066\121\076\152" +
    "\110\131\111\120\001\002\000\050\012\uffb0\013\uffb0\014" +
    "\uffb0\043\uffb0\052\uffb0\053\uffb0\054\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\074" +
    "\uffb0\076\uffb0\110\uffb0\111\uffb0\001\002\000\032\052\127" +
    "\053\122\054\124\061\132\062\126\063\130\064\123\065" +
    "\125\066\121\076\154\110\131\111\120\001\002\000\050" +
    "\012\uffb4\013\uffb4\014\uffb4\043\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\067\uffb4\070\uffb4\074\uffb4\076\uffb4\110\uffb4\111\uffb4\001" +
    "\002\000\026\053\074\055\107\056\073\075\105\103\077" +
    "\104\114\105\100\106\104\107\106\112\102\001\002\000" +
    "\026\053\074\055\107\056\073\075\105\103\077\104\114" +
    "\105\100\106\104\107\106\112\102\001\002\000\006\067" +
    "\115\076\160\001\002\000\050\012\uffc4\013\uffc4\014\uffc4" +
    "\043\uffc4\052\uffc4\053\uffc4\054\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\074\uffc4" +
    "\076\uffc4\110\uffc4\111\uffc4\001\002\000\032\052\127\053" +
    "\122\054\124\061\132\062\126\063\130\064\123\065\125" +
    "\066\121\074\162\110\131\111\120\001\002\000\050\012" +
    "\uffb5\013\uffb5\014\uffb5\043\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067" +
    "\uffb5\070\uffb5\074\uffb5\076\uffb5\110\uffb5\111\uffb5\001\002" +
    "\000\050\012\uffa6\013\uffa6\014\uffa6\043\uffa6\052\127\053" +
    "\122\054\124\061\132\062\126\063\130\064\123\065\125" +
    "\066\121\067\uffa6\070\uffa6\074\uffa6\076\uffa6\110\uffa6\111" +
    "\uffa6\001\002\000\050\012\uffb2\013\uffb2\014\uffb2\043\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\061\uffb2\062\uffb2\063\uffb2\064" +
    "\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\074\uffb2\076\uffb2" +
    "\110\uffb2\111\uffb2\001\002\000\026\053\074\055\107\056" +
    "\073\075\105\103\077\104\114\105\100\106\104\107\106" +
    "\112\102\001\002\000\032\052\127\053\122\054\124\061" +
    "\132\062\126\063\130\064\123\065\125\066\121\067\167" +
    "\110\131\111\120\001\002\000\026\053\074\055\107\056" +
    "\073\075\105\103\077\104\114\105\100\106\104\107\106" +
    "\112\102\001\002\000\032\052\127\053\122\054\124\061" +
    "\132\062\126\063\130\064\123\065\125\066\121\076\171" +
    "\110\131\111\120\001\002\000\050\012\uffaf\013\uffaf\014" +
    "\uffaf\043\uffaf\052\uffaf\053\uffaf\054\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\074" +
    "\uffaf\076\uffaf\110\uffaf\111\uffaf\001\002\000\036\013\uffe7" +
    "\014\uffe7\052\127\053\122\054\124\061\132\062\126\063" +
    "\130\064\123\065\125\066\121\070\uffe7\110\131\111\120" +
    "\001\002\000\026\053\074\055\107\056\073\075\105\103" +
    "\077\104\114\105\100\106\104\107\106\112\102\001\002" +
    "\000\032\052\127\053\122\054\124\061\132\062\126\063" +
    "\130\064\123\065\125\066\121\076\175\110\131\111\120" +
    "\001\002\000\004\042\176\001\002\000\012\003\202\005" +
    "\203\051\054\106\177\001\002\000\004\060\071\001\002" +
    "\000\010\013\uffdd\014\uffdd\070\uffdd\001\002\000\010\013" +
    "\uffda\014\uffda\070\uffda\001\002\000\010\013\uffd9\014\uffd9" +
    "\070\uffd9\001\002\000\014\003\062\017\052\022\060\051" +
    "\054\106\061\001\002\000\010\013\210\014\211\070\uffe6" +
    "\001\002\000\010\013\uffdb\014\uffdb\070\uffdb\001\002\000" +
    "\010\013\210\014\211\070\uffe5\001\002\000\004\070\uffe4" +
    "\001\002\000\004\075\214\001\002\000\012\003\202\005" +
    "\203\051\054\106\177\001\002\000\010\013\uffe0\014\uffe0" +
    "\070\uffe0\001\002\000\004\070\uffde\001\002\000\026\053" +
    "\074\055\107\056\073\075\105\103\077\104\114\105\100" +
    "\106\104\107\106\112\102\001\002\000\032\052\127\053" +
    "\122\054\124\061\132\062\126\063\130\064\123\065\125" +
    "\066\121\076\216\110\131\111\120\001\002\000\004\042" +
    "\217\001\002\000\012\003\202\005\203\051\054\106\177" +
    "\001\002\000\010\013\uffdf\014\uffdf\070\uffdf\001\002\000" +
    "\004\070\uffe3\001\002\000\010\013\uffe1\014\uffe1\070\uffe1" +
    "\001\002\000\014\003\062\017\052\022\060\051\054\106" +
    "\061\001\002\000\016\003\ufff9\015\225\017\ufff9\022\ufff9" +
    "\051\ufff9\106\ufff9\001\002\000\010\013\uffdc\014\uffdc\070" +
    "\uffdc\001\002\000\016\003\ufff6\015\ufff6\017\ufff6\022\ufff6" +
    "\051\ufff6\106\ufff6\001\002\000\016\003\ufff9\015\ufff9\017" +
    "\ufff9\022\ufff9\051\ufff9\106\ufff9\001\002\000\006\070\ufffb" +
    "\071\ufffb\001\002\000\030\003\234\053\074\055\107\056" +
    "\073\075\105\103\077\104\114\105\100\106\104\107\106" +
    "\112\102\001\002\000\034\052\127\053\122\054\124\061" +
    "\132\062\126\063\130\064\123\065\125\066\121\067\uffe9" +
    "\076\uffe9\110\131\111\120\001\002\000\006\067\235\076" +
    "\236\001\002\000\006\067\uffe8\076\uffe8\001\002\000\026" +
    "\053\074\055\107\056\073\075\105\103\077\104\114\105" +
    "\100\106\104\107\106\112\102\001\002\000\010\013\uffeb" +
    "\014\uffeb\070\uffeb\001\002\000\034\052\127\053\122\054" +
    "\124\061\132\062\126\063\130\064\123\065\125\066\121" +
    "\067\uffea\076\uffea\110\131\111\120\001\002\000\016\003" +
    "\ufff5\015\ufff5\017\ufff5\022\ufff5\051\ufff5\106\ufff5\001\002" +
    "\000\004\060\242\001\002\000\026\053\074\055\107\056" +
    "\073\075\105\103\077\104\114\105\100\106\104\107\106" +
    "\112\102\001\002\000\032\043\244\052\127\053\122\054" +
    "\124\061\132\062\126\063\130\064\123\065\125\066\121" +
    "\110\131\111\120\001\002\000\026\053\074\055\107\056" +
    "\073\075\105\103\077\104\114\105\100\106\104\107\106" +
    "\112\102\001\002\000\032\012\246\052\127\053\122\054" +
    "\124\061\132\062\126\063\130\064\123\065\125\066\121" +
    "\110\131\111\120\001\002\000\012\003\202\005\203\051" +
    "\054\106\177\001\002\000\004\070\uffd8\001\002\000\016" +
    "\003\ufff7\015\ufff7\017\ufff7\022\ufff7\051\ufff7\106\ufff7\001" +
    "\002\000\006\067\252\072\253\001\002\000\004\106\255" +
    "\001\002\000\014\006\041\007\042\024\035\035\037\041" +
    "\036\001\002\000\006\067\uffbd\076\uffbd\001\002\000\006" +
    "\067\uffc9\072\uffc9\001\002\000\014\006\041\007\042\024" +
    "\035\035\037\041\036\001\002\000\006\067\uffbc\076\uffbc" +
    "\001\002\000\010\003\uffff\005\uffff\032\017\001\002\000" +
    "\012\003\uffc7\005\uffc7\020\uffc7\032\uffc7\001\002\000\010" +
    "\003\uffc0\005\uffc0\032\uffc0\001\002\000\004\071\264\001" +
    "\002\000\004\002\000\001\002\000\004\075\266\001\002" +
    "\000\004\106\027\001\002\000\006\067\032\076\270\001" +
    "\002\000\004\070\271\001\002\000\012\003\uffd4\005\uffd4" +
    "\010\012\046\011\001\002\000\006\003\045\005\046\001" +
    "\002\000\004\070\274\001\002\000\010\003\uffbe\005\uffbe" +
    "\032\uffbe\001\002\000\004\061\301\001\002\000\016\003" +
    "\uffd1\005\uffd1\020\uffd1\032\uffd1\046\uffd1\106\uffd1\001\002" +
    "\000\016\003\uffd3\005\uffd3\020\uffd3\032\uffd3\046\uffd3\106" +
    "\275\001\002\000\016\003\uffd2\005\uffd2\020\uffd2\032\uffd2" +
    "\046\uffd2\106\uffd2\001\002\000\026\053\074\055\107\056" +
    "\073\075\105\103\077\104\114\105\100\106\104\107\106" +
    "\112\102\001\002\000\032\052\127\053\122\054\124\061" +
    "\132\062\126\063\130\064\123\065\125\066\121\070\303" +
    "\110\131\111\120\001\002\000\016\003\uffd0\005\uffd0\020" +
    "\uffd0\032\uffd0\046\uffd0\106\uffd0\001\002\000\014\003\uffcd" +
    "\005\uffcd\020\uffcd\032\uffcd\106\uffcd\001\002\000\014\003" +
    "\uffcf\005\uffcf\020\uffcf\032\uffcf\106\027\001\002\000\006" +
    "\067\252\072\307\001\002\000\016\004\311\006\041\007" +
    "\042\024\035\035\037\041\036\001\002\000\004\070\324" +
    "\001\002\000\004\073\312\001\002\000\004\104\314\001" +
    "\002\000\004\074\320\001\002\000\004\071\315\001\002" +
    "\000\004\071\316\001\002\000\004\104\317\001\002\000" +
    "\004\074\uffca\001\002\000\004\027\321\001\002\000\014" +
    "\006\041\007\042\024\035\035\037\041\036\001\002\000" +
    "\004\070\323\001\002\000\014\003\uffcb\005\uffcb\020\uffcb" +
    "\032\uffcb\106\uffcb\001\002\000\014\003\uffcc\005\uffcc\020" +
    "\uffcc\032\uffcc\106\uffcc\001\002\000\014\003\uffce\005\uffce" +
    "\020\uffce\032\uffce\106\uffce\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\012\034\013" +
    "\035\007\001\001\000\002\001\001\000\010\043\305\045" +
    "\304\046\303\001\001\000\006\040\275\041\276\001\001" +
    "\000\014\017\022\020\015\021\020\026\021\027\017\001" +
    "\001\000\004\035\014\001\001\000\002\001\001\000\004" +
    "\027\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\262\001\001\000\002\001\001\000\010\020\257" +
    "\026\260\027\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\030\043\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\250\001" +
    "\001\000\002\001\001\000\004\007\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\043" +
    "\034\013\035\007\001\001\000\004\003\046\001\001\000" +
    "\002\001\001\000\020\004\054\005\055\024\050\025\056" +
    "\030\052\033\062\037\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\226\024\050\025" +
    "\056\030\052\033\062\037\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\171\011\107\012\112\013\074\014\110" +
    "\015\102\036\075\001\001\000\022\010\100\011\107\012" +
    "\112\013\074\014\110\015\102\036\075\050\111\001\001" +
    "\000\002\001\001\000\020\010\163\011\107\012\112\013" +
    "\074\014\110\015\102\036\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\162\011\107\012\112\013\074" +
    "\014\110\015\102\036\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\152\011\107\012\112\013\074" +
    "\014\110\015\102\036\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\116\011\107\012\112\013\074\014\110\015\102\036\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\144\011\107\012\112\013\074\014\110\015\102\036\075" +
    "\001\001\000\020\010\143\011\107\012\112\013\074\014" +
    "\110\015\102\036\075\001\001\000\020\010\142\011\107" +
    "\012\112\013\074\014\110\015\102\036\075\001\001\000" +
    "\020\010\141\011\107\012\112\013\074\014\110\015\102" +
    "\036\075\001\001\000\020\010\140\011\107\012\112\013" +
    "\074\014\110\015\102\036\075\001\001\000\020\010\137" +
    "\011\107\012\112\013\074\014\110\015\102\036\075\001" +
    "\001\000\020\010\136\011\107\012\112\013\074\014\110" +
    "\015\102\036\075\001\001\000\020\010\135\011\107\012" +
    "\112\013\074\014\110\015\102\036\075\001\001\000\020" +
    "\010\134\011\107\012\112\013\074\014\110\015\102\036" +
    "\075\001\001\000\020\010\133\011\107\012\112\013\074" +
    "\014\110\015\102\036\075\001\001\000\020\010\132\011" +
    "\107\012\112\013\074\014\110\015\102\036\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\146\011\107\012\112" +
    "\013\074\014\110\015\102\036\075\001\001\000\002\001" +
    "\001\000\020\010\150\011\107\012\112\013\074\014\110" +
    "\015\102\036\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\160" +
    "\011\107\012\112\013\074\014\110\015\102\036\075\001" +
    "\001\000\022\010\100\011\107\012\112\013\074\014\110" +
    "\015\102\036\075\050\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\165\011\107\012" +
    "\112\013\074\014\110\015\102\036\075\001\001\000\002" +
    "\001\001\000\020\010\167\011\107\012\112\013\074\014" +
    "\110\015\102\036\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\173\011\107\012" +
    "\112\013\074\014\110\015\102\036\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\177\022\203\024" +
    "\204\025\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\222\005" +
    "\055\024\050\025\056\030\052\033\062\037\063\001\001" +
    "\000\010\023\205\031\211\032\206\001\001\000\002\001" +
    "\001\000\006\031\221\032\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\177\022\212\024\204\025" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\214\011\107\012\112\013\074\014\110\015\102\036" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\177\022\217\024\204\025\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\223" +
    "\024\050\025\056\030\052\033\062\037\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\231\011\107\012" +
    "\112\013\074\014\110\015\102\036\075\047\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\236\011\107\012\112\013\074\014\110\015\102" +
    "\036\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\242\011\107" +
    "\012\112\013\074\014\110\015\102\036\075\001\001\000" +
    "\002\001\001\000\020\010\244\011\107\012\112\013\074" +
    "\014\110\015\102\036\075\001\001\000\002\001\001\000" +
    "\012\006\177\022\246\024\204\025\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\256\001\001\000\002\001\001\000" +
    "\004\027\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\266\043\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\271\034\013\035\007\001\001\000" +
    "\004\003\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\277\001" +
    "\001\000\002\001\001\000\020\010\301\011\107\012\112" +
    "\013\074\014\110\015\102\036\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\305" +
    "\046\324\001\001\000\002\001\001\000\004\007\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Errores> listaErrores = new LinkedList<>();
    public String programName = "";

    public class symnames {
        public static final String[] tokens = {
            "ARRAY", "BEGIN", "BOOLEAN", "CHAR", "CONST", "DOWNTO", "DO", "ELSE", "END",
            "FILE", "FOR", "FUNCTION", "GOTO", "IF", "IN", "INTEGER", "LABEL", "NIL", 
            "OF", "ON", "PACKED", "PROCEDURE", "PROGRAM", "READLN", "REAL", "RECORD", 
            "REPEAT", "SET", "STRING", "THEN", "TO", "TYPE", "UNTIL", "VAR", "WHILE", 
            "WITH", "WRITELN", "MAS", "MENOS", "MULTI", "DIV", "MOD", "UMENOS", 
            "ASIGNACION", "IGUALA", "DIFERENTEA", "MAYOR", "MENOR", "MAYORIGUAL", 
            "MENORIGUAL", "COMA", "PUNTOCOMA", "PUNTO", "DOSPUNTOS", "L_LLAVE", 
            "R_LLAVE", "L_PAREN", "R_PAREN", "L_CORCH", "R_CORCH", "FLECHA", "BARRA", 
            "CADENA", "ENTERO", "DECIMAL", "ID", "CARACTER", "OR", "AND", "NOT"
        };
    }

    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "Componente inesperado: " + s.value.toString(), 
            s.left, s.right));
    }

    public void unrecovered_syntax_error(Symbol s) { 
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", s.value.toString(), 
            s.left-1, s.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM ID PUNTOCOMA i_declaracion i_fun_proc i_instrucciones PUNTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> fp = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                                                RESULT = new LinkedList<>();
                                                programName = c;
                                                RESULT.addAll(a);
                                                RESULT.addAll(fp);
                                                RESULT.addAll(b);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // i_fun_proc ::= i_funciones i_procedimientos 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.addAll(a); 
                                                    RESULT.addAll(b); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_fun_proc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // i_fun_proc ::= i_funciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.addAll(a); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_fun_proc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // i_fun_proc ::= i_procedimientos 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.addAll(b); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_fun_proc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // i_fun_proc ::= 
            {
              LinkedList<Instruccion> RESULT =null;
		 
                                                    RESULT = new LinkedList<>(); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_fun_proc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // i_instrucciones ::= BEGIN instrucciones END 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // i_instrucciones ::= error 
            {
              LinkedList<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    listaErrores.add(new Errores("SINTACTICO RECUPERABLE", 
                                                        "Error en i_instrucciones", 
                                                        eleft, eright));
                                                    RESULT = new LinkedList<>(); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                RESULT = a; 
                                                                if(b != null) {
                                                                    RESULT.add(b);
                                                                }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                RESULT = new LinkedList<>(); 
                                                                if(a != null) {
                                                                    RESULT.add(a);
                                                                }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= i_write PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= i_asignar PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= i_if PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= i_for PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= llam_proc PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= error PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                                listaErrores.add(new Errores("SINTACTICO RECUPERABLE", 
                                                "Instrucción inválida, falta ';' o error antes de ';'.", 
                                                eleft, eright));
                                                RESULT = null;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                listaErrores.add(new Errores("SINTACTICO RECUPERABLE", 
                                                    "Falta ';' después de la instrucción.", 
                                                    eleft, eright + 1));
                                                RESULT = null;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipos ::= INTEGER 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(Dato.ENTERO);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipos ::= REAL 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(Dato.DECIMAL);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipos ::= CHAR 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(Dato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipos ::= STRING 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(Dato.CADENA);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipos ::= BOOLEAN 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(Dato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // i_write ::= WRITELN L_PAREN write_aux R_PAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new WriteLn(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // write_aux ::= write_aux COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                        RESULT = a; 
                                                        RESULT.add(b);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_aux",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // write_aux ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                        RESULT = new LinkedList<>(); 
                                                        RESULT.add(a);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_aux",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // write_aux ::= error 
            {
              LinkedList<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", 
                                                            "Expresion inválida o falta ','.", 
                                                            eleft, eright));
                                                        RESULT = null;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_aux",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // i_asignar ::= ID ASIGNACION expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AsignacionVar(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_asignar",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // i_if ::= IF L_PAREN expresion R_PAREN THEN ins_statements 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> st = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, st, null, null, aleft, aright); System.out.println("If");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // i_if ::= IF L_PAREN expresion R_PAREN THEN ins_statements i_elseIfs 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> st = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int efsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> efs = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, st, efs, null, aleft, aright); System.out.println("If elseifs");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // i_if ::= IF L_PAREN expresion R_PAREN THEN ins_statements i_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> st = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, st, null, e, aleft, aright); System.out.println("If else ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // i_if ::= IF L_PAREN expresion R_PAREN THEN ins_statements i_elseIfs i_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> st = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int efsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> efs = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, st, efs, e, aleft, aright); System.out.println("If completo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // i_if ::= error R_PAREN 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // i_elseIfs ::= i_elseIfs i_elseIf 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_elseIfs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // i_elseIfs ::= i_elseIf 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_elseIfs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // i_elseIf ::= ELSEIF L_PAREN expresion R_PAREN THEN ins_statements 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> st = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseIf(a, st, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_elseIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // i_else ::= ELSE ins_statements 
            {
              Instruccion RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> st = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Else(st, stleft, stright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ins_statements ::= instruccionIf 
            {
              LinkedList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins_statements",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ins_statements ::= BEGIN instrucciones instruccion END 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins_statements",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccionIf ::= i_write 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionIf",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccionIf ::= i_asignar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionIf",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccionIf ::= error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                            listaErrores.add(new Errores("SINTACTICO RECUPERABLE", 
                                                "Instrucción no válida.", 
                                                eleft, eright));
                                            RESULT = null;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionIf",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // i_for ::= FOR ID ASIGNACION expresion TO expresion DO ins_statements 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion asig = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new For(id, asig, b, ins, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_for",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // i_declaracion ::= dec_const dec_var 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.add(a); 
                                                    RESULT.add(b); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // i_declaracion ::= dec_const 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.add(a); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // i_declaracion ::= dec_var 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.add(b); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // i_declaracion ::= 
            {
              LinkedList<Instruccion> RESULT =null;
		 
                                                    RESULT = new LinkedList<>(); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec_const ::= CONST constantes_list 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                        RESULT = new DecConst(a, aleft, aright);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_const",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constantes_list ::= constantes_list constante 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                                RESULT = a; 
                                                                RESULT.add(b); 
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantes_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constantes_list ::= constante 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                                RESULT = new LinkedList<>(); 
                                                                RESULT.add(a);
                                                            
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantes_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // constante ::= ID IGUALA expresion PUNTOCOMA 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Simbolo(b.tipo, a, b, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_var ::= VAR variables_list 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new DecVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variables_list ::= variables_list var_aux 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> b = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.addAll(b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variables_list ::= var_aux 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.addAll(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var_aux ::= variable DOSPUNTOS tipos PUNTOCOMA 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                                                                RESULT = new LinkedList<>();
                                                                for(String id : a) {
                                                                    Simbolo s = new Simbolo(b, id, null, true);
                                                                    RESULT.add(s);
                                                                }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_aux",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var_aux ::= variable DOSPUNTOS ARRAY L_LLAVE rango R_LLAVE OF tipos PUNTOCOMA 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LinkedList<>();
                                                                                            for(String id : a) {
                                                                                                Simbolo s = new Simbolo(b, id, c, true);
                                                                                                RESULT.add(s);
                                                                                            }
                                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_aux",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rango ::= ENTERO PUNTO PUNTO ENTERO 
            {
              int[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new int[]{Integer.parseInt(a), Integer.parseInt(b)}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable ::= variable COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                    RESULT = a;  
                                                    RESULT.add(b);  
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                    RESULT = new LinkedList<>();
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // i_funciones ::= i_funciones funcion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    RESULT = a;
                                                    RESULT.add(b);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // i_funciones ::= funcion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.add(a); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funcion ::= FUNCTION ID L_PAREN parametros R_PAREN DOSPUNTOS tipos PUNTOCOMA i_declaracion i_instrucciones PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> dec = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Funcion(id, t, p, dec, i, fleft, fright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // llam_fun ::= ID L_PAREN llam_par R_PAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> lp = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LlamadaFunc(id, lp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llam_fun",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // llam_proc ::= ID L_PAREN llam_par R_PAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> lp = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LlamadaProc(id, lp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llam_proc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // llam_par ::= llam_par COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llam_par",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // llam_par ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llam_par",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // i_procedimientos ::= i_procedimientos procedimiento 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                        RESULT = a ;
                                                                        RESULT.add(b); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_procedimientos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // i_procedimientos ::= procedimiento 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                        RESULT = new LinkedList<>(); 
                                                                        RESULT.add(a);  
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_procedimientos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // procedimiento ::= PROCEDURE ID L_PAREN parametros R_PAREN PUNTOCOMA i_declaracion i_instrucciones PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<HashMap> pr = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> dec = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Procedimiento(id, pr, dec, i, new Tipo(Dato.VOID), pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros ::= parametros COMA variable DOSPUNTOS tipos 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                        RESULT = a;
                                                                        for(var id : ids) {
                                                                            var mapa = new HashMap<String, Object>();
                                                                            mapa.put("id", id);
                                                                            mapa.put("tipo", t);
                                                                            RESULT.add(mapa);
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros ::= variable DOSPUNTOS tipos 
            {
              LinkedList<HashMap> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                        RESULT = new LinkedList<HashMap>();
                                                                        for(var id : ids) { 
                                                                            var mapa = new HashMap<String, Object>();
                                                                            mapa.put("id", id);
                                                                            mapa.put("tipo", t);
                                                                            RESULT.add(mapa);
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= e_arit 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= e_relac 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= e_logic 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= e_nativ 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= casteo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Acceso (a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= ID L_LLAVE expresion R_LLAVE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  System.out.println("Variable array");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= L_PAREN expresion R_PAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= llam_fun 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // e_arit ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmetico(a, OpAritmeticos.NEGACION, aleft, aright);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // e_arit ::= expresion MULTI expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmetico(a, b, OpAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // e_arit ::= DIV L_PAREN expresion COMA expresion R_PAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Aritmetico (a, b, OpAritmeticos.DIVISION, aleft, aright);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // e_arit ::= MOD L_PAREN expresion COMA expresion R_PAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Aritmetico (a, b, OpAritmeticos.MODULO, aleft, aright);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // e_arit ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmetico(a, b, OpAritmeticos.SUMA, aleft, aright);           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // e_arit ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmetico(a, b, OpAritmeticos.RESTA, aleft, aright);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // e_relac ::= expresion IGUALA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.IGUALA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // e_relac ::= expresion DIFERENTEA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.DIFERENTEA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // e_relac ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // e_relac ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // e_relac ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.MAYORIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // e_relac ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.MENORIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // e_logic ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logico(a, OpLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_logic",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // e_logic ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logico(a, b, OpLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_logic",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // e_logic ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logico(a, b, OpLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_logic",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // e_nativ ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(Dato.ENTERO), aleft, aright);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_nativ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // e_nativ ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Double.parseDouble(a), new Tipo(Dato.DECIMAL), aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_nativ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // e_nativ ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(Dato.CADENA), aleft, aright);                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_nativ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // e_nativ ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char a = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(Dato.CARACTER), aleft, aright);                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_nativ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
