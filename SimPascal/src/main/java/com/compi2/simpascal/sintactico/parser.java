
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compi2.simpascal.sintactico;

import com.compi2.simpascal.instrucciones.*;
import com.compi2.simpascal.instrucciones.operadores.*;
import com.compi2.simpascal.instrucciones.simbolos.Simbolo;
import com.compi2.simpascal.instrucciones.tipos.*;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\011\000\002\016" +
    "\005\000\002\045\003\000\002\045\002\000\002\046\003" +
    "\000\002\046\002\000\002\047\003\000\002\047\002\000" +
    "\002\037\004\000\002\054\004\000\002\054\003\000\002" +
    "\055\006\000\002\055\013\000\002\040\004\000\002\051" +
    "\004\000\002\051\003\000\002\050\006\000\002\041\004" +
    "\000\002\052\004\000\002\052\003\000\002\053\006\000" +
    "\002\053\013\000\002\060\006\000\002\057\005\000\002" +
    "\057\003\000\002\021\004\000\002\021\003\000\002\021" +
    "\003\000\002\021\002\000\002\003\005\000\002\003\003" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\025\006\000\002\026\006\000\002" +
    "\061\005\000\002\061\003\000\002\061\003\000\002\027" +
    "\005\000\002\032\012\000\002\023\003\000\002\023\002" +
    "\000\002\024\004\000\002\024\003\000\002\033\010\000" +
    "\002\044\003\000\002\044\002\000\002\034\004\000\002" +
    "\022\003\000\002\022\006\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\035\012\000\002\036\010\000\002\017\004\000\002" +
    "\017\003\000\002\030\015\000\002\042\006\000\002\043" +
    "\006\000\002\062\005\000\002\062\003\000\002\020\004" +
    "\000\002\020\003\000\002\031\013\000\002\056\007\000" +
    "\002\056\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\006\000\002\010\005\000\002\010\003" +
    "\000\002\011\004\000\002\011\005\000\002\011\010\000" +
    "\002\011\010\000\002\011\005\000\002\011\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\012\004" +
    "\000\002\012\005\000\002\012\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\004\033\005\001\002\000\004\002\373\001" +
    "\002\000\004\106\006\001\002\000\004\070\007\001\002" +
    "\000\020\003\ufffd\005\ufffd\010\ufffd\020\ufffd\032\ufffd\044" +
    "\013\046\ufffd\001\002\000\016\003\ufffe\005\ufffe\010\ufffe" +
    "\020\ufffe\032\ufffe\046\ufffe\001\002\000\016\003\ufffb\005" +
    "\ufffb\010\340\020\ufffb\032\ufffb\046\ufffb\001\002\000\012" +
    "\003\uffe4\005\uffe4\020\055\032\050\001\002\000\004\106" +
    "\014\001\002\000\012\061\uffe8\067\uffe8\072\uffe8\076\uffe8" +
    "\001\002\000\020\003\ufff6\005\ufff6\010\ufff6\020\ufff6\032" +
    "\ufff6\046\ufff6\106\ufff6\001\002\000\006\061\022\067\021" +
    "\001\002\000\020\003\ufff8\005\ufff8\010\ufff8\020\ufff8\032" +
    "\ufff8\046\ufff8\106\014\001\002\000\020\003\ufff7\005\ufff7" +
    "\010\ufff7\020\ufff7\032\ufff7\046\ufff7\106\ufff7\001\002\000" +
    "\004\106\046\001\002\000\020\004\032\006\030\007\031" +
    "\024\024\035\026\041\025\106\023\001\002\000\010\067" +
    "\uffd1\070\uffd1\076\uffd1\001\002\000\010\067\uffd6\070\uffd6" +
    "\076\uffd6\001\002\000\010\067\uffd3\070\uffd3\076\uffd3\001" +
    "\002\000\010\067\uffd5\070\uffd5\076\uffd5\001\002\000\004" +
    "\070\045\001\002\000\010\067\uffd2\070\uffd2\076\uffd2\001" +
    "\002\000\010\067\uffd4\070\uffd4\076\uffd4\001\002\000\004" +
    "\073\033\001\002\000\004\104\035\001\002\000\004\074" +
    "\041\001\002\000\004\071\036\001\002\000\004\071\037" +
    "\001\002\000\004\104\040\001\002\000\004\074\uffea\001" +
    "\002\000\004\027\042\001\002\000\016\006\030\007\031" +
    "\024\024\035\026\041\025\106\023\001\002\000\004\070" +
    "\044\001\002\000\020\003\ufff4\005\ufff4\010\ufff4\020\ufff4" +
    "\032\ufff4\046\ufff4\106\ufff4\001\002\000\020\003\ufff5\005" +
    "\ufff5\010\ufff5\020\ufff5\032\ufff5\046\ufff5\106\ufff5\001\002" +
    "\000\012\061\uffe9\067\uffe9\072\uffe9\076\uffe9\001\002\000" +
    "\010\003\uffe5\005\uffe5\032\050\001\002\000\004\106\330" +
    "\001\002\000\010\003\uffad\005\uffad\032\uffad\001\002\000" +
    "\006\003\072\005\073\001\002\000\012\003\uffb4\005\uffb4" +
    "\020\uffb4\032\uffb4\001\002\000\012\003\uffe6\005\uffe6\020" +
    "\055\032\050\001\002\000\004\106\056\001\002\000\004" +
    "\075\057\001\002\000\004\106\014\001\002\000\006\067" +
    "\064\076\065\001\002\000\006\067\021\072\062\001\002" +
    "\000\016\006\030\007\031\024\024\035\026\041\025\106" +
    "\023\001\002\000\006\067\uffaa\076\uffaa\001\002\000\004" +
    "\106\014\001\002\000\004\072\066\001\002\000\016\006" +
    "\030\007\031\024\024\035\026\041\025\106\023\001\002" +
    "\000\004\070\070\001\002\000\014\003\ufffd\005\ufffd\010" +
    "\ufffd\044\013\046\ufffd\001\002\000\006\003\072\005\073" +
    "\001\002\000\006\070\uffe2\071\uffe2\001\002\000\020\003" +
    "\113\017\101\022\111\034\102\047\077\051\104\106\112" +
    "\001\002\000\004\070\075\001\002\000\012\003\uffb3\005" +
    "\uffb3\020\uffb3\032\uffb3\001\002\000\004\070\317\001\002" +
    "\000\004\075\312\001\002\000\004\070\311\001\002\000" +
    "\004\106\302\001\002\000\004\075\277\001\002\000\004" +
    "\070\276\001\002\000\004\075\267\001\002\000\004\070" +
    "\266\001\002\000\022\003\113\015\265\017\101\022\111" +
    "\034\102\047\077\051\104\106\112\001\002\000\022\003" +
    "\uffe0\015\uffe0\017\uffe0\022\uffe0\034\uffe0\047\uffe0\051\uffe0" +
    "\106\uffe0\001\002\000\004\070\263\001\002\000\004\075" +
    "\223\001\002\000\006\060\121\075\122\001\002\000\024" +
    "\003\uffd7\015\uffd7\017\uffd7\022\uffd7\034\uffd7\047\uffd7\051" +
    "\uffd7\070\120\106\uffd7\001\002\000\004\070\117\001\002" +
    "\000\004\070\116\001\002\000\022\003\uffd9\015\uffd9\017" +
    "\uffd9\022\uffd9\034\uffd9\047\uffd9\051\uffd9\106\uffd9\001\002" +
    "\000\022\003\uffdb\015\uffdb\017\uffdb\022\uffdb\034\uffdb\047" +
    "\uffdb\051\uffdb\106\uffdb\001\002\000\022\003\uffd8\015\uffd8" +
    "\017\uffd8\022\uffd8\034\uffd8\047\uffd8\051\uffd8\106\uffd8\001" +
    "\002\000\026\053\124\055\137\056\123\075\135\103\127" +
    "\104\144\105\130\106\134\107\136\112\132\001\002\000" +
    "\026\053\124\055\137\056\123\075\135\103\127\104\144" +
    "\105\130\106\134\107\136\112\132\001\002\000\004\075" +
    "\215\001\002\000\026\053\124\055\137\056\123\075\135" +
    "\103\127\104\144\105\130\106\134\107\136\112\132\001" +
    "\002\000\050\012\uffa8\013\uffa8\014\uffa8\043\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065" +
    "\uffa8\066\uffa8\067\uffa8\070\uffa8\074\uffa8\076\uffa8\110\uffa8" +
    "\111\uffa8\001\002\000\050\012\uffa1\013\uffa1\014\uffa1\043" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\074\uffa1\076" +
    "\uffa1\110\uffa1\111\uffa1\001\002\000\050\012\uff8f\013\uff8f" +
    "\014\uff8f\043\uff8f\052\uff8f\053\uff8f\054\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f" +
    "\074\uff8f\076\uff8f\110\uff8f\111\uff8f\001\002\000\050\012" +
    "\uff90\013\uff90\014\uff90\043\uff90\052\uff90\053\uff90\054\uff90" +
    "\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067" +
    "\uff90\070\uff90\074\uff90\076\uff90\110\uff90\111\uff90\001\002" +
    "\000\034\052\155\053\152\054\154\061\162\062\156\063" +
    "\160\064\153\065\157\066\151\067\uffaf\076\uffaf\110\161" +
    "\111\150\001\002\000\026\053\124\055\137\056\123\075" +
    "\135\103\127\104\144\105\130\106\134\107\136\112\132" +
    "\001\002\000\050\012\uffa5\013\uffa5\014\uffa5\043\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\067\uffa5\070\uffa5\074\uffa5\076\uffa5\110" +
    "\uffa5\111\uffa5\001\002\000\054\012\uffa4\013\uffa4\014\uffa4" +
    "\043\uffa4\052\uffa4\053\uffa4\054\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\073\205" +
    "\074\uffa4\075\206\076\uffa4\110\uffa4\111\uffa4\001\002\000" +
    "\026\053\124\055\137\056\123\075\135\103\127\104\144" +
    "\105\130\106\134\107\136\112\132\001\002\000\050\012" +
    "\uff8e\013\uff8e\014\uff8e\043\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067" +
    "\uff8e\070\uff8e\074\uff8e\076\uff8e\110\uff8e\111\uff8e\001\002" +
    "\000\004\075\176\001\002\000\050\012\uffa9\013\uffa9\014" +
    "\uffa9\043\uffa9\052\uffa9\053\uffa9\054\uffa9\061\uffa9\062\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\074" +
    "\uffa9\076\uffa9\110\uffa9\111\uffa9\001\002\000\050\012\uffa6" +
    "\013\uffa6\014\uffa6\043\uffa6\052\uffa6\053\uffa6\054\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6" +
    "\070\uffa6\074\uffa6\076\uffa6\110\uffa6\111\uffa6\001\002\000" +
    "\006\067\145\076\146\001\002\000\050\012\uffa7\013\uffa7" +
    "\014\uffa7\043\uffa7\052\uffa7\053\uffa7\054\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7" +
    "\074\uffa7\076\uffa7\110\uffa7\111\uffa7\001\002\000\050\012" +
    "\uff91\013\uff91\014\uff91\043\uff91\052\uff91\053\uff91\054\uff91" +
    "\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067" +
    "\uff91\070\uff91\074\uff91\076\uff91\110\uff91\111\uff91\001\002" +
    "\000\026\053\124\055\137\056\123\075\135\103\127\104" +
    "\144\105\130\106\134\107\136\112\132\001\002\000\010" +
    "\013\uffb1\014\uffb1\070\uffb1\001\002\000\034\052\155\053" +
    "\152\054\154\061\162\062\156\063\160\064\153\065\157" +
    "\066\151\067\uffb0\076\uffb0\110\161\111\150\001\002\000" +
    "\026\053\124\055\137\056\123\075\135\103\127\104\144" +
    "\105\130\106\134\107\136\112\132\001\002\000\026\053" +
    "\124\055\137\056\123\075\135\103\127\104\144\105\130" +
    "\106\134\107\136\112\132\001\002\000\026\053\124\055" +
    "\137\056\123\075\135\103\127\104\144\105\130\106\134" +
    "\107\136\112\132\001\002\000\026\053\124\055\137\056" +
    "\123\075\135\103\127\104\144\105\130\106\134\107\136" +
    "\112\132\001\002\000\026\053\124\055\137\056\123\075" +
    "\135\103\127\104\144\105\130\106\134\107\136\112\132" +
    "\001\002\000\026\053\124\055\137\056\123\075\135\103" +
    "\127\104\144\105\130\106\134\107\136\112\132\001\002" +
    "\000\026\053\124\055\137\056\123\075\135\103\127\104" +
    "\144\105\130\106\134\107\136\112\132\001\002\000\026" +
    "\053\124\055\137\056\123\075\135\103\127\104\144\105" +
    "\130\106\134\107\136\112\132\001\002\000\026\053\124" +
    "\055\137\056\123\075\135\103\127\104\144\105\130\106" +
    "\134\107\136\112\132\001\002\000\026\053\124\055\137" +
    "\056\123\075\135\103\127\104\144\105\130\106\134\107" +
    "\136\112\132\001\002\000\026\053\124\055\137\056\123" +
    "\075\135\103\127\104\144\105\130\106\134\107\136\112" +
    "\132\001\002\000\050\012\uff9a\013\uff9a\014\uff9a\043\uff9a" +
    "\052\155\053\152\054\154\061\uff9a\062\uff9a\063\uff9a\064" +
    "\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\074\uff9a\076\uff9a" +
    "\110\uff9a\111\uff9a\001\002\000\050\012\uff93\013\uff93\014" +
    "\uff93\043\uff93\052\155\053\152\054\154\061\162\062\156" +
    "\063\160\064\153\065\157\066\151\067\uff93\070\uff93\074" +
    "\uff93\076\uff93\110\uff93\111\150\001\002\000\050\012\uff98" +
    "\013\uff98\014\uff98\043\uff98\052\155\053\152\054\154\061" +
    "\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98" +
    "\070\uff98\074\uff98\076\uff98\110\uff98\111\uff98\001\002\000" +
    "\050\012\uff96\013\uff96\014\uff96\043\uff96\052\155\053\152" +
    "\054\154\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066" +
    "\uff96\067\uff96\070\uff96\074\uff96\076\uff96\110\uff96\111\uff96" +
    "\001\002\000\050\012\uff99\013\uff99\014\uff99\043\uff99\052" +
    "\155\053\152\054\154\061\uff99\062\uff99\063\uff99\064\uff99" +
    "\065\uff99\066\uff99\067\uff99\070\uff99\074\uff99\076\uff99\110" +
    "\uff99\111\uff99\001\002\000\050\012\uff9c\013\uff9c\014\uff9c" +
    "\043\uff9c\052\uff9c\053\uff9c\054\154\061\uff9c\062\uff9c\063" +
    "\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\074\uff9c" +
    "\076\uff9c\110\uff9c\111\uff9c\001\002\000\050\012\uff9f\013" +
    "\uff9f\014\uff9f\043\uff9f\052\uff9f\053\uff9f\054\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070" +
    "\uff9f\074\uff9f\076\uff9f\110\uff9f\111\uff9f\001\002\000\050" +
    "\012\uff97\013\uff97\014\uff97\043\uff97\052\155\053\152\054" +
    "\154\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97" +
    "\067\uff97\070\uff97\074\uff97\076\uff97\110\uff97\111\uff97\001" +
    "\002\000\050\012\uff9b\013\uff9b\014\uff9b\043\uff9b\052\uff9b" +
    "\053\uff9b\054\154\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\074\uff9b\076\uff9b\110\uff9b" +
    "\111\uff9b\001\002\000\050\012\uff95\013\uff95\014\uff95\043" +
    "\uff95\052\155\053\152\054\154\061\uff95\062\uff95\063\uff95" +
    "\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95\074\uff95\076" +
    "\uff95\110\uff95\111\uff95\001\002\000\050\012\uff92\013\uff92" +
    "\014\uff92\043\uff92\052\155\053\152\054\154\061\162\062" +
    "\156\063\160\064\153\065\157\066\151\067\uff92\070\uff92" +
    "\074\uff92\076\uff92\110\uff92\111\uff92\001\002\000\026\053" +
    "\124\055\137\056\123\075\135\103\127\104\144\105\130" +
    "\106\134\107\136\112\132\001\002\000\032\052\155\053" +
    "\152\054\154\061\162\062\156\063\160\064\153\065\157" +
    "\066\151\067\200\110\161\111\150\001\002\000\026\053" +
    "\124\055\137\056\123\075\135\103\127\104\144\105\130" +
    "\106\134\107\136\112\132\001\002\000\032\052\155\053" +
    "\152\054\154\061\162\062\156\063\160\064\153\065\157" +
    "\066\151\076\202\110\161\111\150\001\002\000\050\012" +
    "\uff9e\013\uff9e\014\uff9e\043\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067" +
    "\uff9e\070\uff9e\074\uff9e\076\uff9e\110\uff9e\111\uff9e\001\002" +
    "\000\032\052\155\053\152\054\154\061\162\062\156\063" +
    "\160\064\153\065\157\066\151\076\204\110\161\111\150" +
    "\001\002\000\050\012\uffa2\013\uffa2\014\uffa2\043\uffa2\052" +
    "\uffa2\053\uffa2\054\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2" +
    "\065\uffa2\066\uffa2\067\uffa2\070\uffa2\074\uffa2\076\uffa2\110" +
    "\uffa2\111\uffa2\001\002\000\026\053\124\055\137\056\123" +
    "\075\135\103\127\104\144\105\130\106\134\107\136\112" +
    "\132\001\002\000\026\053\124\055\137\056\123\075\135" +
    "\103\127\104\144\105\130\106\134\107\136\112\132\001" +
    "\002\000\006\067\145\076\210\001\002\000\050\012\uffb2" +
    "\013\uffb2\014\uffb2\043\uffb2\052\uffb2\053\uffb2\054\uffb2\061" +
    "\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2" +
    "\070\uffb2\074\uffb2\076\uffb2\110\uffb2\111\uffb2\001\002\000" +
    "\032\052\155\053\152\054\154\061\162\062\156\063\160" +
    "\064\153\065\157\066\151\074\212\110\161\111\150\001" +
    "\002\000\050\012\uffa3\013\uffa3\014\uffa3\043\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\074\uffa3\076\uffa3\110\uffa3" +
    "\111\uffa3\001\002\000\050\012\uff94\013\uff94\014\uff94\043" +
    "\uff94\052\155\053\152\054\154\061\162\062\156\063\160" +
    "\064\153\065\157\066\151\067\uff94\070\uff94\074\uff94\076" +
    "\uff94\110\uff94\111\uff94\001\002\000\050\012\uffa0\013\uffa0" +
    "\014\uffa0\043\uffa0\052\uffa0\053\uffa0\054\uffa0\061\uffa0\062" +
    "\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0" +
    "\074\uffa0\076\uffa0\110\uffa0\111\uffa0\001\002\000\026\053" +
    "\124\055\137\056\123\075\135\103\127\104\144\105\130" +
    "\106\134\107\136\112\132\001\002\000\032\052\155\053" +
    "\152\054\154\061\162\062\156\063\160\064\153\065\157" +
    "\066\151\067\217\110\161\111\150\001\002\000\026\053" +
    "\124\055\137\056\123\075\135\103\127\104\144\105\130" +
    "\106\134\107\136\112\132\001\002\000\032\052\155\053" +
    "\152\054\154\061\162\062\156\063\160\064\153\065\157" +
    "\066\151\076\221\110\161\111\150\001\002\000\050\012" +
    "\uff9d\013\uff9d\014\uff9d\043\uff9d\052\uff9d\053\uff9d\054\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\074\uff9d\076\uff9d\110\uff9d\111\uff9d\001\002" +
    "\000\036\013\uffcb\014\uffcb\052\155\053\152\054\154\061" +
    "\162\062\156\063\160\064\153\065\157\066\151\070\uffcb" +
    "\110\161\111\150\001\002\000\026\053\124\055\137\056" +
    "\123\075\135\103\127\104\144\105\130\106\134\107\136" +
    "\112\132\001\002\000\032\052\155\053\152\054\154\061" +
    "\162\062\156\063\160\064\153\065\157\066\151\076\225" +
    "\110\161\111\150\001\002\000\004\042\226\001\002\000" +
    "\022\003\235\005\240\017\101\022\111\034\102\047\077" +
    "\051\104\106\112\001\002\000\010\013\uffbf\014\uffbf\070" +
    "\uffbf\001\002\000\010\013\uffbe\014\uffbe\070\uffbe\001\002" +
    "\000\010\013\uffc1\014\uffc1\070\uffc1\001\002\000\010\013" +
    "\uffbc\014\uffbc\070\uffbc\001\002\000\010\013\uffba\014\uffba" +
    "\070\uffba\001\002\000\010\013\uffbd\014\uffbd\070\uffbd\001" +
    "\002\000\010\013\uffb8\014\uffb8\070\uffb8\001\002\000\010" +
    "\013\uffbb\014\uffbb\070\uffbb\001\002\000\010\013\uffb9\014" +
    "\uffb9\070\uffb9\001\002\000\020\003\113\017\101\022\111" +
    "\034\102\047\077\051\104\106\112\001\002\000\010\013" +
    "\243\014\uffc8\070\uffc8\001\002\000\010\013\243\014\uffc9" +
    "\070\uffc9\001\002\000\004\075\252\001\002\000\010\013" +
    "\uffc6\014\uffc6\070\uffc6\001\002\000\010\013\uffc3\014\247" +
    "\070\uffc3\001\002\000\010\013\uffc4\014\uffc4\070\uffc4\001" +
    "\002\000\022\003\235\005\240\017\101\022\111\034\102" +
    "\047\077\051\104\106\112\001\002\000\010\013\uffca\014" +
    "\uffca\070\uffca\001\002\000\010\013\uffc2\014\uffc2\070\uffc2" +
    "\001\002\000\026\053\124\055\137\056\123\075\135\103" +
    "\127\104\144\105\130\106\134\107\136\112\132\001\002" +
    "\000\032\052\155\053\152\054\154\061\162\062\156\063" +
    "\160\064\153\065\157\066\151\076\254\110\161\111\150" +
    "\001\002\000\004\042\255\001\002\000\022\003\235\005" +
    "\240\017\101\022\111\034\102\047\077\051\104\106\112" +
    "\001\002\000\010\013\uffc5\014\uffc5\070\uffc5\001\002\000" +
    "\010\013\uffc7\014\uffc7\070\uffc7\001\002\000\020\003\113" +
    "\017\101\022\111\034\102\047\077\051\104\106\112\001" +
    "\002\000\022\003\uffe1\015\262\017\uffe1\022\uffe1\034\uffe1" +
    "\047\uffe1\051\uffe1\106\uffe1\001\002\000\010\013\uffc0\014" +
    "\uffc0\070\uffc0\001\002\000\022\003\uffdd\015\uffdd\017\uffdd" +
    "\022\uffdd\034\uffdd\047\uffdd\051\uffdd\106\uffdd\001\002\000" +
    "\022\003\uffe1\015\uffe1\017\uffe1\022\uffe1\034\uffe1\047\uffe1" +
    "\051\uffe1\106\uffe1\001\002\000\006\070\uffe3\071\uffe3\001" +
    "\002\000\022\003\uffda\015\uffda\017\uffda\022\uffda\034\uffda" +
    "\047\uffda\051\uffda\106\uffda\001\002\000\030\003\272\053" +
    "\124\055\137\056\123\075\135\103\127\104\144\105\130" +
    "\106\134\107\136\112\132\001\002\000\034\052\155\053" +
    "\152\054\154\061\162\062\156\063\160\064\153\065\157" +
    "\066\151\067\uffcd\076\uffcd\110\161\111\150\001\002\000" +
    "\006\067\273\076\274\001\002\000\006\067\uffcc\076\uffcc" +
    "\001\002\000\026\053\124\055\137\056\123\075\135\103" +
    "\127\104\144\105\130\106\134\107\136\112\132\001\002" +
    "\000\010\013\uffd0\014\uffd0\070\uffd0\001\002\000\034\052" +
    "\155\053\152\054\154\061\162\062\156\063\160\064\153" +
    "\065\157\066\151\067\uffce\076\uffce\110\161\111\150\001" +
    "\002\000\022\003\uffdc\015\uffdc\017\uffdc\022\uffdc\034\uffdc" +
    "\047\uffdc\051\uffdc\106\uffdc\001\002\000\004\106\014\001" +
    "\002\000\006\067\021\076\301\001\002\000\010\013\uffcf" +
    "\014\uffcf\070\uffcf\001\002\000\004\060\303\001\002\000" +
    "\026\053\124\055\137\056\123\075\135\103\127\104\144" +
    "\105\130\106\134\107\136\112\132\001\002\000\032\043" +
    "\305\052\155\053\152\054\154\061\162\062\156\063\160" +
    "\064\153\065\157\066\151\110\161\111\150\001\002\000" +
    "\026\053\124\055\137\056\123\075\135\103\127\104\144" +
    "\105\130\106\134\107\136\112\132\001\002\000\032\012" +
    "\307\052\155\053\152\054\154\061\162\062\156\063\160" +
    "\064\153\065\157\066\151\110\161\111\150\001\002\000" +
    "\022\003\235\005\240\017\101\022\111\034\102\047\077" +
    "\051\104\106\112\001\002\000\010\013\uffb7\014\uffb7\070" +
    "\uffb7\001\002\000\022\003\uffde\015\uffde\017\uffde\022\uffde" +
    "\034\uffde\047\uffde\051\uffde\106\uffde\001\002\000\026\053" +
    "\124\055\137\056\123\075\135\103\127\104\144\105\130" +
    "\106\134\107\136\112\132\001\002\000\032\052\155\053" +
    "\152\054\154\061\162\062\156\063\160\064\153\065\157" +
    "\066\151\076\314\110\161\111\150\001\002\000\004\012" +
    "\315\001\002\000\022\003\235\005\240\017\101\022\111" +
    "\034\102\047\077\051\104\106\112\001\002\000\010\013" +
    "\uffb6\014\uffb6\070\uffb6\001\002\000\022\003\uffdf\015\uffdf" +
    "\017\uffdf\022\uffdf\034\uffdf\047\uffdf\051\uffdf\106\uffdf\001" +
    "\002\000\006\067\021\072\321\001\002\000\016\006\030" +
    "\007\031\024\024\035\026\041\025\106\023\001\002\000" +
    "\006\067\uffab\076\uffab\001\002\000\010\003\uffe7\005\uffe7" +
    "\032\050\001\002\000\012\003\uffb5\005\uffb5\020\uffb5\032" +
    "\uffb5\001\002\000\010\003\uffae\005\uffae\032\uffae\001\002" +
    "\000\004\071\327\001\002\000\004\002\000\001\002\000" +
    "\004\075\331\001\002\000\004\106\014\001\002\000\006" +
    "\067\064\076\333\001\002\000\004\070\334\001\002\000" +
    "\014\003\ufffd\005\ufffd\010\ufffd\044\013\046\ufffd\001\002" +
    "\000\006\003\072\005\073\001\002\000\004\070\337\001" +
    "\002\000\010\003\uffac\005\uffac\032\uffac\001\002\000\004" +
    "\106\364\001\002\000\014\003\ufffc\005\ufffc\020\ufffc\032" +
    "\ufffc\046\ufffc\001\002\000\014\003\ufff9\005\ufff9\020\ufff9" +
    "\032\ufff9\046\344\001\002\000\012\003\ufffa\005\ufffa\020" +
    "\ufffa\032\ufffa\001\002\000\004\106\014\001\002\000\012" +
    "\003\uffff\005\uffff\020\uffff\032\uffff\001\002\000\014\003" +
    "\uffed\005\uffed\020\uffed\032\uffed\106\uffed\001\002\000\006" +
    "\067\021\072\352\001\002\000\014\003\uffef\005\uffef\020" +
    "\uffef\032\uffef\106\014\001\002\000\014\003\uffee\005\uffee" +
    "\020\uffee\032\uffee\106\uffee\001\002\000\020\004\354\006" +
    "\030\007\031\024\024\035\026\041\025\106\023\001\002" +
    "\000\004\070\363\001\002\000\004\073\355\001\002\000" +
    "\004\104\035\001\002\000\004\074\357\001\002\000\004" +
    "\027\360\001\002\000\016\006\030\007\031\024\024\035" +
    "\026\041\025\106\023\001\002\000\004\070\362\001\002" +
    "\000\014\003\uffeb\005\uffeb\020\uffeb\032\uffeb\106\uffeb\001" +
    "\002\000\014\003\uffec\005\uffec\020\uffec\032\uffec\106\uffec" +
    "\001\002\000\004\061\370\001\002\000\016\003\ufff1\005" +
    "\ufff1\020\ufff1\032\ufff1\046\ufff1\106\ufff1\001\002\000\016" +
    "\003\ufff3\005\ufff3\020\ufff3\032\ufff3\046\ufff3\106\364\001" +
    "\002\000\016\003\ufff2\005\ufff2\020\ufff2\032\ufff2\046\ufff2" +
    "\106\ufff2\001\002\000\026\053\124\055\137\056\123\075" +
    "\135\103\127\104\144\105\130\106\134\107\136\112\132" +
    "\001\002\000\032\052\155\053\152\054\154\061\162\062" +
    "\156\063\160\064\153\065\157\066\151\070\372\110\161" +
    "\111\150\001\002\000\016\003\ufff0\005\ufff0\020\ufff0\032" +
    "\ufff0\046\ufff0\106\ufff0\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\011\037\007" +
    "\045\010\001\001\000\002\001\001\000\006\040\340\046" +
    "\341\001\001\000\014\017\053\020\046\021\051\030\052" +
    "\031\050\001\001\000\010\054\016\055\014\057\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\055\017\057\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\325\001\001\000\002\001\001" +
    "\000\010\020\322\030\323\031\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\057\057\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\062\001" +
    "\001\000\002\001\001\000\004\057\317\001\001\000\002" +
    "\001\001\000\004\007\066\001\001\000\002\001\001\000" +
    "\010\016\070\037\007\045\010\001\001\000\004\003\073" +
    "\001\001\000\002\001\001\000\024\004\105\005\106\025" +
    "\075\026\077\027\107\032\102\035\113\036\104\043\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\263\025\075\026\077\027\107" +
    "\032\102\035\113\036\104\043\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\221\011\137\012\142\013\124\014\140\015\132\042" +
    "\125\001\001\000\022\010\130\011\137\012\142\013\124" +
    "\014\140\015\132\042\125\062\141\001\001\000\002\001" +
    "\001\000\020\010\213\011\137\012\142\013\124\014\140" +
    "\015\132\042\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\212\011\137\012\142\013\124\014\140\015" +
    "\132\042\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\202\011\137\012\142\013\124\014\140\015" +
    "\132\042\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\146\011\137" +
    "\012\142\013\124\014\140\015\132\042\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\174\011\137" +
    "\012\142\013\124\014\140\015\132\042\125\001\001\000" +
    "\020\010\173\011\137\012\142\013\124\014\140\015\132" +
    "\042\125\001\001\000\020\010\172\011\137\012\142\013" +
    "\124\014\140\015\132\042\125\001\001\000\020\010\171" +
    "\011\137\012\142\013\124\014\140\015\132\042\125\001" +
    "\001\000\020\010\170\011\137\012\142\013\124\014\140" +
    "\015\132\042\125\001\001\000\020\010\167\011\137\012" +
    "\142\013\124\014\140\015\132\042\125\001\001\000\020" +
    "\010\166\011\137\012\142\013\124\014\140\015\132\042" +
    "\125\001\001\000\020\010\165\011\137\012\142\013\124" +
    "\014\140\015\132\042\125\001\001\000\020\010\164\011" +
    "\137\012\142\013\124\014\140\015\132\042\125\001\001" +
    "\000\020\010\163\011\137\012\142\013\124\014\140\015" +
    "\132\042\125\001\001\000\020\010\162\011\137\012\142" +
    "\013\124\014\140\015\132\042\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\176\011\137\012\142\013\124\014" +
    "\140\015\132\042\125\001\001\000\002\001\001\000\020" +
    "\010\200\011\137\012\142\013\124\014\140\015\132\042" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\210\011\137\012" +
    "\142\013\124\014\140\015\132\042\125\001\001\000\022" +
    "\010\130\011\137\012\142\013\124\014\140\015\132\042" +
    "\125\062\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\215\011\137\012\142\013\124" +
    "\014\140\015\132\042\125\001\001\000\002\001\001\000" +
    "\020\010\217\011\137\012\142\013\124\014\140\015\132" +
    "\042\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\223\011\137\012\142\013\124" +
    "\014\140\015\132\042\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\230\022\240\025\226\026\227" +
    "\027\233\032\231\035\235\036\232\043\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\257" +
    "\005\106\025\075\026\077\027\107\032\102\035\113\036" +
    "\104\043\114\001\001\000\010\023\244\024\241\033\243" +
    "\001\001\000\004\033\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\245\044\247\001\001\000\002" +
    "\001\001\000\024\006\230\022\250\025\226\026\227\027" +
    "\233\032\231\035\235\036\232\043\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\252\011\137\012" +
    "\142\013\124\014\140\015\132\042\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\230\022\255\025" +
    "\226\026\227\027\233\032\231\035\235\036\232\043\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\260\025\075\026\077\027\107\032\102\035\113\036\104" +
    "\043\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\267\011\137\012\142\013\124\014" +
    "\140\015\132\042\125\061\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\274\011" +
    "\137\012\142\013\124\014\140\015\132\042\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\303\011\137\012\142\013" +
    "\124\014\140\015\132\042\125\001\001\000\002\001\001" +
    "\000\020\010\305\011\137\012\142\013\124\014\140\015" +
    "\132\042\125\001\001\000\002\001\001\000\024\006\230" +
    "\022\307\025\226\026\227\027\233\032\231\035\235\036" +
    "\232\043\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\312\011\137\012\142\013\124\014\140\015" +
    "\132\042\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\230\022\315\025\226\026\227\027\233\032" +
    "\231\035\235\036\232\043\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\321\001" +
    "\001\000\002\001\001\000\004\031\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\331\057\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\334\037" +
    "\007\045\010\001\001\000\004\003\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\364\051\365\001" +
    "\001\000\002\001\001\000\006\041\342\047\344\001\001" +
    "\000\002\001\001\000\010\052\347\053\345\057\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\053\350\057\346\001\001\000\002\001\001\000" +
    "\004\007\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\366\001\001\000\002\001\001\000\020" +
    "\010\370\011\137\012\142\013\124\014\140\015\132\042" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Errores> listaErrores = new LinkedList<>();
    public String programName = "";

    public class symnames {
        public static final String[] tokens = {
            "ARRAY", "BEGIN", "BOOLEAN", "CHAR", "CONST", "DOWNTO", "DO", "ELSE", "END",
            "FILE", "FOR", "FUNCTION", "GOTO", "IF", "IN", "INTEGER", "LABEL", "NIL", 
            "OF", "ON", "PACKED", "PROCEDURE", "PROGRAM", "READLN", "REAL", "RECORD", 
            "REPEAT", "SET", "STRING", "THEN", "TO", "TYPE", "UNTIL", "VAR", "WHILE", 
            "WITH", "WRITELN", "MAS", "MENOS", "MULTI", "DIV", "MOD", "UMENOS", 
            "ASIGNACION", "IGUALA", "DIFERENTEA", "MAYOR", "MENOR", "MAYORIGUAL", 
            "MENORIGUAL", "COMA", "PUNTOCOMA", "PUNTO", "DOSPUNTOS", "L_LLAVE", 
            "R_LLAVE", "L_PAREN", "R_PAREN", "L_CORCH", "R_CORCH", "FLECHA", "BARRA", 
            "CADENA", "ENTERO", "DECIMAL", "ID", "CARACTER", "OR", "AND", "NOT"
        };
    }

    public void syntax_error(Symbol s){
        if(s.value != null) {
            listaErrores.add(new Errores("Sintactico Recuperable", "Componente inesperado: " + s.value.toString(), 
                s.left, s.right));
        }
    }

    public void unrecovered_syntax_error(Symbol s) { 
        if(s.value != null) {
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", s.value.toString(), 
            s.left-1, s.right));
        }else {
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "", 
            s.left-1, s.right));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM ID PUNTOCOMA i_declaracion i_fun_proc i_instrucciones PUNTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> fp = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                                                RESULT = new LinkedList<>();
                                                programName = c;
                                                RESULT.addAll(a);
                                                RESULT.addAll(fp);
                                                RESULT.addAll(b);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // i_declaracion ::= dec_type_opt dec_const_opt dec_var_opt 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new LinkedList<>(); 
                        if (a != null) RESULT.add(a);
                        if (b != null) RESULT.add(b);
                        if (c != null) RESULT.add(c);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_type_opt ::= dec_type 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_type_opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_type_opt ::= 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_type_opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_const_opt ::= dec_const 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_const_opt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_const_opt ::= 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_const_opt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_var_opt ::= dec_var 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_var_opt ::= 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_type ::= TYPE types_list 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecTypes(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // types_list ::= types_list types_aux 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> b = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.addAll(b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types_list",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // types_list ::= types_aux 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.addAll(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types_list",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // types_aux ::= variable IGUALA tipos PUNTOCOMA 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                                                                RESULT = new LinkedList<>();
                                                                for(String id : a) {
                                                                    Simbolo s = new Simbolo(b, id, null, true);
                                                                    RESULT.add(s);
                                                                }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types_aux",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // types_aux ::= variable IGUALA ARRAY L_LLAVE rango R_LLAVE OF tipos PUNTOCOMA 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LinkedList<>();
                                                                                            for(String id : a) {
                                                                                                Simbolo s = new Simbolo(b, id, c, true);
                                                                                                RESULT.add(s);
                                                                                            }
                                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types_aux",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_const ::= CONST constantes_list 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                        RESULT = new DecConst(a, aleft, aright);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_const",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constantes_list ::= constantes_list constante 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                                RESULT = a; 
                                                                RESULT.add(b); 
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantes_list",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constantes_list ::= constante 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                                RESULT = new LinkedList<>(); 
                                                                RESULT.add(a);
                                                            
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantes_list",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constante ::= ID IGUALA expresion PUNTOCOMA 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Simbolo(b.tipo, a, b, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_var ::= VAR variables_list 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new DecVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variables_list ::= variables_list var_aux 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> b = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.addAll(b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables_list ::= var_aux 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.addAll(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_aux ::= variable DOSPUNTOS tipos PUNTOCOMA 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                                                                RESULT = new LinkedList<>();
                                                                for(String id : a) {
                                                                    Simbolo s = new Simbolo(b, id, null, true);
                                                                    RESULT.add(s);
                                                                }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_aux ::= variable DOSPUNTOS ARRAY L_LLAVE rango R_LLAVE OF tipos PUNTOCOMA 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LinkedList<>();
                                                                                            for(String id : a) {
                                                                                                Simbolo s = new Simbolo(b, id, c, true);
                                                                                                RESULT.add(s);
                                                                                            }
                                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_aux",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rango ::= ENTERO PUNTO PUNTO ENTERO 
            {
              int[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new int[]{Integer.parseInt(a), Integer.parseInt(b)}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rango",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable ::= variable COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                    RESULT = a;  
                                                    RESULT.add(b);  
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                    RESULT = new LinkedList<>();
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // i_fun_proc ::= i_funciones i_procedimientos 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.addAll(a); 
                                                    RESULT.addAll(b); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_fun_proc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // i_fun_proc ::= i_funciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.addAll(a); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_fun_proc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // i_fun_proc ::= i_procedimientos 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.addAll(b); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_fun_proc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // i_fun_proc ::= 
            {
              LinkedList<Instruccion> RESULT =null;
		 
                                                    RESULT = new LinkedList<>(); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_fun_proc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // i_instrucciones ::= BEGIN instrucciones END 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // i_instrucciones ::= error 
            {
              LinkedList<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                    listaErrores.add(new Errores("Sintactico Recuperable", 
                                                        "Error en i_instrucciones", 
                                                        eleft, eright));
                                                    RESULT = new LinkedList<>(); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                RESULT = a; 
                                                                if(b != null) {
                                                                    RESULT.add(b);
                                                                }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                RESULT = new LinkedList<>(); 
                                                                if(a != null) {
                                                                    RESULT.add(a);
                                                                }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= i_write PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= i_read PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= i_asignar PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= i_if PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= i_for PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= i_while PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= llam_proc PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= error PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                                listaErrores.add(new Errores("Sintactico Recuperable", 
                                                "Instrucción inválida, falta ';' o error antes de ';'.", 
                                                eleft, eright));
                                                RESULT = null;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                listaErrores.add(new Errores("Sintactico Recuperable", 
                                                    "Falta ';' después de la instrucción.", 
                                                    eleft, eright + 1));
                                                RESULT = null;
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipos ::= INTEGER 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(Dato.ENTERO);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipos ::= REAL 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(Dato.DECIMAL);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipos ::= CHAR 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(Dato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipos ::= STRING 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(Dato.CADENA);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipos ::= BOOLEAN 
            {
              Tipo RESULT =null;
		  RESULT = new Tipo(Dato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipos ::= ID 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new TypeP(a);         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // i_write ::= WRITELN L_PAREN write_aux R_PAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new WriteLn(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_write",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // i_read ::= READLN L_PAREN variable R_PAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ReadLn(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_read",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // write_aux ::= write_aux COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                        RESULT = a; 
                                                        RESULT.add(b);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_aux",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // write_aux ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                        RESULT = new LinkedList<>(); 
                                                        RESULT.add(a);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_aux",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // write_aux ::= error 
            {
              LinkedList<Instruccion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                                        listaErrores.add(new Errores("Sintactico Recuperable", 
                                                            "Expresion inválida o falta ','.", 
                                                            eleft, eright));
                                                        RESULT = null;
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_aux",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // i_asignar ::= ID ASIGNACION expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new AsignacionVar(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_asignar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // i_if ::= IF L_PAREN expresion R_PAREN THEN ins_statements i_elseIfsB i_elseB 
            {
              Instruccion RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> st = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int efsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> efs = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, st, efs, e, iffleft, iffright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // i_elseIfsB ::= i_elseIfs 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_elseIfsB",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // i_elseIfsB ::= 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_elseIfsB",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // i_elseIfs ::= i_elseIfs i_elseIf 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_elseIfs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // i_elseIfs ::= i_elseIf 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_elseIfs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // i_elseIf ::= ELSEIF L_PAREN expresion R_PAREN THEN ins_statements 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> st = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseIf(a, st, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_elseIf",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // i_elseB ::= i_else 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_elseB",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // i_elseB ::= 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_elseB",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // i_else ::= ELSE ins_statements 
            {
              Instruccion RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> st = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Else(st, stleft, stright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ins_statements ::= instruccionU 
            {
              LinkedList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins_statements",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ins_statements ::= BEGIN instrucciones instruccion END 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins_statements",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruccionU ::= i_write 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionU",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruccionU ::= i_read 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionU",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruccionU ::= i_asignar 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionU",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instruccionU ::= i_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionU",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instruccionU ::= i_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionU",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instruccionU ::= i_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionU",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instruccionU ::= llam_proc 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionU",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // instruccionU ::= error 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                            listaErrores.add(new Errores("Sintactico Recuperable", 
                                                "Instrucción no válida.", 
                                                eleft, eright));
                                            RESULT = null;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionU",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // i_for ::= FOR ID ASIGNACION expresion TO expresion DO ins_statements 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion asig = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new For(id, asig, b, ins, fleft, fright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_for",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // i_while ::= WHILE L_PAREN expresion R_PAREN DO ins_statements 
            {
              Instruccion RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> ins = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new While(exp, ins, wleft, wright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_while",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // i_funciones ::= i_funciones funcion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    RESULT = a;
                                                    RESULT.add(b);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // i_funciones ::= funcion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    RESULT = new LinkedList<>(); 
                                                    RESULT.add(a); 
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_funciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // funcion ::= FUNCTION ID L_PAREN parametros R_PAREN DOSPUNTOS tipos PUNTOCOMA i_declaracion i_instrucciones PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> dec = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Funcion(id, t, p, dec, i, fleft, fright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // llam_fun ::= ID L_PAREN llam_par R_PAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> lp = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LlamadaFunc(id, lp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llam_fun",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llam_proc ::= ID L_PAREN llam_par R_PAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> lp = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new LlamadaProc(id, lp, idleft, idright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llam_proc",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // llam_par ::= llam_par COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llam_par",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llam_par ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llam_par",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // i_procedimientos ::= i_procedimientos procedimiento 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                        RESULT = a ;
                                                                        RESULT.add(b); 
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_procedimientos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // i_procedimientos ::= procedimiento 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                        RESULT = new LinkedList<>(); 
                                                                        RESULT.add(a);  
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i_procedimientos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // procedimiento ::= PROCEDURE ID L_PAREN parametros R_PAREN PUNTOCOMA i_declaracion i_instrucciones PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<HashMap> pr = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> dec = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Procedimiento(id, pr, dec, i, new Tipo(Dato.VOID), pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros ::= parametros COMA variable DOSPUNTOS tipos 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                        RESULT = a;
                                                                        for(var id : ids) {
                                                                            var mapa = new HashMap<String, Object>();
                                                                            mapa.put("id", id);
                                                                            mapa.put("tipo", t);
                                                                            RESULT.add(mapa);
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametros ::= variable DOSPUNTOS tipos 
            {
              LinkedList<HashMap> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> ids = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                        RESULT = new LinkedList<HashMap>();
                                                                        for(var id : ids) { 
                                                                            var mapa = new HashMap<String, Object>();
                                                                            mapa.put("id", id);
                                                                            mapa.put("tipo", t);
                                                                            RESULT.add(mapa);
                                                                        }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= e_arit 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= e_relac 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= e_logic 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= e_nativ 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= casteo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Acceso (a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= ID L_LLAVE expresion R_LLAVE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  System.out.println("Variable array");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= L_PAREN expresion R_PAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= llam_fun 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // e_arit ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmetico(a, OpAritmeticos.NEGACION, aleft, aright);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // e_arit ::= expresion MULTI expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmetico(a, b, OpAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // e_arit ::= DIV L_PAREN expresion COMA expresion R_PAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Aritmetico (a, b, OpAritmeticos.DIVISION, aleft, aright);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // e_arit ::= MOD L_PAREN expresion COMA expresion R_PAREN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Aritmetico (a, b, OpAritmeticos.MODULO, aleft, aright);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // e_arit ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmetico(a, b, OpAritmeticos.SUMA, aleft, aright);           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // e_arit ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Aritmetico(a, b, OpAritmeticos.RESTA, aleft, aright);          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_arit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // e_relac ::= expresion IGUALA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.IGUALA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // e_relac ::= expresion DIFERENTEA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.DIFERENTEA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // e_relac ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // e_relac ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // e_relac ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.MAYORIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // e_relac ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Relacional(a, b, OpRelacionales.MENORIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_relac",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // e_logic ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logico(a, OpLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_logic",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // e_logic ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logico(a, b, OpLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_logic",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // e_logic ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Logico(a, b, OpLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_logic",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // e_nativ ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo(Dato.ENTERO), aleft, aright);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_nativ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // e_nativ ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Double.parseDouble(a), new Tipo(Dato.DECIMAL), aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_nativ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // e_nativ ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(Dato.CADENA), aleft, aright);                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_nativ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // e_nativ ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char a = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo(Dato.CARACTER), aleft, aright);                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_nativ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
